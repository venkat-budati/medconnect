<link rel="stylesheet" href="/css/donor.css">
<!-- Donor Dashboard -->
     <div class="main-content">
    <div class="history-container">
        <!-- Tabs -->
        <div class="tabs-container">
            <div class="tab active" id="requestsTab">
                <i class="fas fa-hand-holding-medical"></i>
                Requests Received
            </div>
            <div class="tab" id="historyTab">
                <i class="fas fa-history"></i>
                Donation History
            </div>
        </div>
        
        <!-- Requests Received Section -->
        <div class="requests-section">
            <div class="section-header">
                <div>
                    <h2 class="section-title">Donation Requests</h2>
                    <p class="section-subtitle">Manage requests for your donated medicines</p>
                </div>
                <div class="results-count" id="requestsCount">Loading...</div>
            </div>
            
            <div class="requests-grid" id="requestsGrid">
                <div class="loading-spinner">
                    <i class="fas fa-spinner fa-spin"></i>
                    <p>Loading requests...</p>
                </div>
            </div>
        </div>
        
        <!-- Donation History Section -->
        <div class="donation-history" id="donationHistory">
            <div class="section-header">
                <div>
                    <h2 class="section-title">Your Donation History</h2>
                    <p class="section-subtitle">All your successful donations</p>
                </div>
                <div class="results-count" id="donationsCount">Loading...</div>
            </div>
            
            <div class="history-grid" id="donationsGrid">
                <div class="loading-spinner">
                    <i class="fas fa-spinner fa-spin"></i>
                    <p>Loading donation history...</p>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const requestsTab = document.getElementById('requestsTab');
        const historyTab = document.getElementById('historyTab');
        const donationHistory = document.getElementById('donationHistory');
        const requestsGrid = document.getElementById('requestsGrid');
        const donationsGrid = document.getElementById('donationsGrid');
        const requestsCount = document.getElementById('requestsCount');
        const donationsCount = document.getElementById('donationsCount');
        
        // Tab switching functionality
        requestsTab.addEventListener('click', function() {
            requestsTab.classList.add('active');
            historyTab.classList.remove('active');
            document.querySelector('.requests-section').style.display = 'block';
            donationHistory.style.display = 'none';
            loadRequests();
        });
        
        historyTab.addEventListener('click', function() {
            historyTab.classList.add('active');
            requestsTab.classList.remove('active');
            document.querySelector('.requests-section').style.display = 'none';
            donationHistory.style.display = 'block';
            loadDonations();
        });
        
        // Load initial data
        loadRequests();
        
        // Function to load requests
        async function loadRequests() {
            try {
                requestsGrid.innerHTML = '<div class="loading-spinner"><i class="fas fa-spinner fa-spin"></i><p>Loading requests...</p></div>';
                
                const response = await fetch('/dashboard/api/donations/history');
                const data = await response.json();
                
                if (data.success) {
                    // Get all requests for all donations
                    const allRequests = [];
                    for (const donation of data.donations) {
                        const requestsResponse = await fetch(`/dashboard/api/donations/${donation._id}/requests`);
                        const requestsData = await requestsResponse.json();
                        if (requestsData.success) {
                            allRequests.push(...requestsData.requests);
                        }
                    }
                    
                    displayRequests(allRequests);
                    requestsCount.textContent = `${allRequests.length} requests`;
                } else {
                    requestsGrid.innerHTML = '<div class="no-data"><p>No requests found</p></div>';
                    requestsCount.textContent = '0 requests';
                }
            } catch (error) {
                console.error('Error loading requests:', error);
                requestsGrid.innerHTML = '<div class="error"><p>Error loading requests</p></div>';
            }
        }
        
        // Function to load donations
        async function loadDonations() {
            try {
                donationsGrid.innerHTML = '<div class="loading-spinner"><i class="fas fa-spinner fa-spin"></i><p>Loading donation history...</p></div>';
                
                const response = await fetch('/dashboard/api/donations/history');
                const data = await response.json();
                
                if (data.success) {
                    displayDonations(data.donations);
                    donationsCount.textContent = `${data.donations.length} donations made`;
                } else {
                    donationsGrid.innerHTML = '<div class="no-data"><p>No donations found</p></div>';
                    donationsCount.textContent = '0 donations made';
                }
            } catch (error) {
                console.error('Error loading donations:', error);
                donationsGrid.innerHTML = '<div class="error"><p>Error loading donations</p></div>';
            }
        }
        
        // Function to display requests
        function displayRequests(requests) {
            if (requests.length === 0) {
                requestsGrid.innerHTML = '<div class="no-data"><p>No requests found</p></div>';
                return;
            }
            
            const requestsHTML = requests.map(request => {
                const statusClass = getStatusClass(request.status);
                const actionButtons = getActionButtons(request);
                const requesterInitials = getInitials(request.requester.firstName, request.requester.lastName);
                
                return `
                    <div class="request-card" data-request-id="${request._id}">
                        <div class="card-header">
                            <div class="medicine-icon">
                            <i class="fas fa-capsules"></i>
                        </div>
                            <div class="medicine-info">
                                <div class="medicine-name">${request.medicine.name}</div>
                                <div class="request-date">
                                    <i class="fas fa-calendar"></i> Requested: ${formatDate(request.createdAt)}
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="info-item">
                                <span class="info-label">Quantity</span>
                                <span class="info-value">${request.quantity} ${request.medicine.unit}</span>
                    </div>
                            <div class="info-item">
                                <span class="info-label">Expiry Date</span>
                                <span class="info-value">${formatDate(request.medicine.expiry)}</span>
                        </div>
                            <div class="info-item">
                                <span class="info-label">Status</span>
                                <span class="status-badge ${statusClass}">${request.status}</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Distance</span>
                                <span class="info-value">${request.requester.city}, ${request.requester.state}</span>
                            </div>
                        </div>
                        <div class="card-footer">
                            <div class="requester-info">
                                <div class="requester-avatar">${requesterInitials}</div>
                                <div>
                                    <div class="requester-name">${request.requester.firstName} ${request.requester.lastName}</div>
                                    <div class="requester-location">${request.requester.city}, ${request.requester.state}</div>
                    </div>
                </div>
                            <div class="action-buttons">
                                ${actionButtons}
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
            
            requestsGrid.innerHTML = requestsHTML;
            attachEventListeners();
        }
        
        // Function to display donations
        function displayDonations(donations) {
            if (donations.length === 0) {
                donationsGrid.innerHTML = '<div class="no-data"><p>No donations found</p></div>';
                return;
            }
            
            const donationsHTML = donations.map(donation => {
                return `
                <div class="donation-card">
                    <div class="donation-header">
                        <div class="donation-icon">
                            <i class="fas fa-pills"></i>
                        </div>
                        <div class="donation-info">
                                <div class="donation-title">${donation.name}</div>
                            <div class="donation-date">
                                    <i class="fas fa-calendar"></i> Donated: ${formatDate(donation.createdAt)}
                                </div>
                        </div>
                    </div>
                    <div class="donation-body">
                        <div class="donation-item">
                            <span class="donation-label">Quantity</span>
                                <span class="donation-value">${donation.quantity} ${donation.unit}</span>
                        </div>
                        <div class="donation-item">
                                <span class="donation-label">Requests</span>
                                <span class="donation-value">${donation.requestCount || 0} requests</span>
                        </div>
                        <div class="donation-item">
                                <span class="donation-label">Completed</span>
                                <span class="donation-value">${donation.completedCount || 0} completed</span>
                        </div>
                        <div class="donation-item">
                                <span class="donation-label">Status</span>
                                <span class="donation-value">${donation.status}</span>
                            </div>
                            <div class="donation-status">${donation.status}</div>
                        </div>
                    </div>
                `;
            }).join('');
            
            donationsGrid.innerHTML = donationsHTML;
        }
        
        // Helper functions
        function getStatusClass(status) {
            const statusClasses = {
                'Pending': 'status-pending',
                'Accepted': 'status-accepted',
                'Rejected': 'status-rejected',
                'Completed': 'status-completed',
                'Failed': 'status-failed'
            };
            return statusClasses[status] || 'status-pending';
        }
        
        function getActionButtons(request) {
            switch (request.status) {
                case 'Pending':
                    return `
                        <button class="action-button btn-accept" data-request-id="${request._id}">Accept</button>
                        <button class="action-button btn-reject" data-request-id="${request._id}">Reject</button>
                    `;
                case 'Accepted':
                    return `
                        <button class="action-button btn-complete" data-request-id="${request._id}">Completed</button>
                        <button class="action-button btn-failed" data-request-id="${request._id}">Failed</button>
                    `;
                default:
                    return '';
            }
        }
        
        function getInitials(firstName, lastName) {
            return (firstName?.charAt(0) || '') + (lastName?.charAt(0) || '');
        }
        
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric' 
            });
        }
        
        // Attach event listeners to action buttons
        function attachEventListeners() {
            // Accept buttons
            document.querySelectorAll('.btn-accept').forEach(button => {
                button.addEventListener('click', async function() {
                    const requestId = this.dataset.requestId;
                    await updateRequestStatus(requestId, 'accept');
                });
            });
            
            // Reject buttons
            document.querySelectorAll('.btn-reject').forEach(button => {
                button.addEventListener('click', async function() {
                    const requestId = this.dataset.requestId;
                    await updateRequestStatus(requestId, 'reject');
                });
            });
            
            // Complete buttons
            document.querySelectorAll('.btn-complete').forEach(button => {
                button.addEventListener('click', async function() {
                    const requestId = this.dataset.requestId;
                    await updateRequestStatus(requestId, 'complete');
                });
            });
            
            // Failed buttons
            document.querySelectorAll('.btn-failed').forEach(button => {
                button.addEventListener('click', async function() {
                    const requestId = this.dataset.requestId;
                    await updateRequestStatus(requestId, 'failed');
                });
            });
        }
        
        // Function to update request status
        async function updateRequestStatus(requestId, action) {
            try {
                const response = await fetch(`/dashboard/api/requests/${requestId}/${action}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({})
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Reload requests to show updated data
                    loadRequests();
                    showNotification(data.message, 'success');
                } else {
                    showNotification(data.error || 'Error updating request', 'error');
                }
            } catch (error) {
                console.error('Error updating request status:', error);
                showNotification('Error updating request status', 'error');
            }
        }
        
        // Function to show notifications
        function showNotification(message, type) {
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
                <span>${message}</span>
            `;
            
            document.body.appendChild(notification);
            
            // Remove notification after 3 seconds
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }
        });
    </script>