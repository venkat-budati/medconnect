<main class="main-content">
  <section class="notifications-section">
    <div class="notifications-header">
    <h2>Notifications</h2>
    <div class="notifications-actions">
      <button id="markAllReadBtn" class="btn btn-secondary">
        <i class="fas fa-check-double"></i>
        Mark All as Read
      </button>
      <div class="notifications-filter">
        <select id="filterType" class="form-select">
          <option value="">All Notifications</option>
          <option value="request_received">Medicine Requests</option>
          <option value="request_accepted">Request Accepted</option>
          <option value="request_rejected">Request Rejected</option>
          <option value="medicine_expiring">Expiring Medicines</option>
          <option value="profile_update">Profile Updates</option>
        </select>
      </div>
    </div>
  </div>

  <div class="notifications-container">
    <div id="notificationsList" class="notifications-list">
      <!-- Notifications will be loaded here -->
    </div>
    
    <div id="loadingNotifications" class="loading-notifications" style="display: none;">
      <div class="spinner"></div>
      <p>Loading notifications...</p>
    </div>
    
    <div id="noNotifications" class="no-notifications" style="display: none;">
      <i class="fas fa-bell-slash"></i>
      <h3>No notifications yet</h3>
      <p>You'll see notifications here when you receive medicine requests or other updates.</p>
    </div>
    
    <div id="notificationsError" class="notification-error" style="display: none;">
      <i class="fas fa-exclamation-triangle"></i>
      <h3>Error loading notifications</h3>
      <p>Please try refreshing the page.</p>
    </div>
  </div>
  </section>
</main>

<script>
let currentFilter = '';

// Load notifications on page load
document.addEventListener('DOMContentLoaded', function() {
  loadNotifications();
  
  // Event listeners
  document.getElementById('markAllReadBtn').addEventListener('click', markAllAsRead);
  document.getElementById('filterType').addEventListener('change', function() {
    currentFilter = this.value;
    loadNotifications();
  });
});

async function loadNotifications() {
  const notificationsList = document.getElementById('notificationsList');
  const loadingDiv = document.getElementById('loadingNotifications');
  const noNotificationsDiv = document.getElementById('noNotifications');
  const errorDiv = document.getElementById('notificationsError');
  
  // Show loading
  notificationsList.innerHTML = '';
  loadingDiv.style.display = 'flex';
  noNotificationsDiv.style.display = 'none';
  errorDiv.style.display = 'none';
  
  try {
    const params = new URLSearchParams();
    
    if (currentFilter) {
      params.append('type', currentFilter);
    }
    
    const response = await fetch(`/dashboard/notifications?${params}`);
    const data = await response.json();
    
    if (response.ok) {
      loadingDiv.style.display = 'none';
      
      if (data.notifications && data.notifications.length > 0) {
        displayNotifications(data.notifications);
      } else {
        noNotificationsDiv.style.display = 'flex';
      }
    } else {
      throw new Error(data.error || 'Failed to load notifications');
    }
  } catch (error) {
    console.error('Error loading notifications:', error);
    loadingDiv.style.display = 'none';
    errorDiv.style.display = 'flex';
  }
}

function displayNotifications(notifications) {
  const notificationsList = document.getElementById('notificationsList');
  
  notificationsList.innerHTML = notifications.map(notification => `
    <div class="notification-item ${notification.read ? 'read' : 'unread'}" data-id="${notification._id || ''}">
      <div class="notification-icon">
        ${getNotificationIcon(notification.type)}
      </div>
      <div class="notification-content">
        <div class="notification-header">
          <h4 class="notification-title">${notification.title || 'Notification'}</h4>
          <span class="notification-time">${formatTimeAgo(notification.createdAt)}</span>
        </div>
        <p class="notification-message">${notification.message || 'No message available'}</p>
        ${notification.relatedMedicine && notification.relatedMedicine.name ? `<p class="notification-related">Related: ${notification.relatedMedicine.name}</p>` : ''}
        ${notification.relatedRequest && notification.relatedRequest.status ? `<p class="notification-related">Request Status: ${notification.relatedRequest.status}</p>` : ''}
      </div>
      ${!notification.read ? '<div class="notification-unread-dot"></div>' : ''}
      ${!notification.read ? `<button class="mark-read-btn" onclick="markAsRead('${notification._id || ''}')">
        <i class="fas fa-check"></i>
      </button>` : ''}
    </div>
  `).join('');
}

function getNotificationIcon(type) {
  const icons = {
    'request_received': '<i class="fas fa-hand-holding-medical"></i>',
    'request_accepted': '<i class="fas fa-check-circle"></i>',
    'request_rejected': '<i class="fas fa-times-circle"></i>',
    'medicine_expiring': '<i class="fas fa-exclamation-triangle"></i>',
    'profile_update': '<i class="fas fa-user-edit"></i>',
    'default': '<i class="fas fa-bell"></i>'
  };
  return icons[type] || icons.default;
}

function formatTimeAgo(dateString) {
  // Handle undefined, null, or invalid date strings
  if (!dateString) {
    return 'Recently';
  }
  
  const date = new Date(dateString);
  
  // Check if the date is valid
  if (isNaN(date.getTime())) {
    return 'Recently';
  }
  
  const now = new Date();
  const diffInSeconds = Math.floor((now - date) / 1000);
  
  if (diffInSeconds < 60) return 'Just now';
  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
  if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)}d ago`;
  
  return date.toLocaleDateString();
}



async function markAsRead(notificationId) {
  try {
    const response = await fetch(`/dashboard/notifications/${notificationId}/read`, {
      method: 'POST'
    });
    
    if (response.ok) {
      // Update the notification item
      const notificationItem = document.querySelector(`[data-id="${notificationId}"]`);
      if (notificationItem) {
        notificationItem.classList.remove('unread');
        notificationItem.classList.add('read');
        const unreadDot = notificationItem.querySelector('.notification-unread-dot');
        const markReadBtn = notificationItem.querySelector('.mark-read-btn');
        if (unreadDot) unreadDot.remove();
        if (markReadBtn) markReadBtn.remove();
      }
      
      // Update the notification badge in the header
      updateNotificationBadge();
    }
  } catch (error) {
    console.error('Error marking notification as read:', error);
  }
}

async function markAllAsRead() {
  try {
    const response = await fetch('/dashboard/notifications/read-all', {
      method: 'POST'
    });
    
    if (response.ok) {
      // Reload notifications to reflect changes
      loadNotifications();
      
      // Update the notification badge in the header
      updateNotificationBadge();
    }
  } catch (error) {
    console.error('Error marking all notifications as read:', error);
  }
}

function updateNotificationBadge() {
  // Update the notification badge count in the header
  const badge = document.querySelector('.notification-badge');
  if (badge) {
    const currentCount = parseInt(badge.textContent) || 0;
    if (currentCount > 0) {
      badge.textContent = Math.max(0, currentCount - 1);
      if (badge.textContent === '0') {
        badge.style.display = 'none';
      }
    }
  }
}
</script> 
</div>