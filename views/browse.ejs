<% title = 'Browse Medicines - MedConnect' %>

<link rel="stylesheet" href="/css/browse.css">

<div class="main-content">
    <div class="browse-container">
        <div class="browse-header">
            <div>
                <h2 class="browse-title">Browse Available Medicines</h2>
                <p class="browse-subtitle">Find medicines donated by others near you</p>
            </div>
            <div class="results-count"><%= medicines ? medicines.length : 0 %> available medicines</div>
        </div>
        <div class="filters-container">
            <div class="filter-group">
                <label class="filter-label">Medicine Name</label>
                <input type="text" class="filter-input" id="searchFilter" placeholder="Search by name" value="<%= currentFilters.search || '' %>">
            </div>
            
            <div class="filter-group">
                <label class="filter-label">Category</label>
                <select class="filter-select" id="categoryFilter">
                    <option value="">All Categories</option>
                    <% if (categories) { %>
                        <% categories.forEach(category => { %>
                            <option value="<%= category %>" <%= currentFilters.category === category ? 'selected' : '' %>><%= category %></option>
                        <% }); %>
                    <% } %>
                </select>
            </div>
            
            <div class="filter-group">
                <label class="filter-label">Distance</label>
                <div class="distance-filter-container">
                    <select class="filter-select" id="distanceFilter">
                        <option value="5" <%= currentFilters.distance === '5' ? 'selected' : '' %>>Within 5 km</option>
                        <option value="10" <%= currentFilters.distance === '10' ? 'selected' : '' %>>Within 10 km</option>
                        <option value="15" <%= currentFilters.distance === '15' ? 'selected' : '' %>>Within 15 km</option>
                        <option value="25" <%= currentFilters.distance === '25' ? 'selected' : '' %>>Within 25 km</option>
                        <option value="50" <%= currentFilters.distance === '50' ? 'selected' : '' %>>Within 50 km</option>
                        <option value="custom" <%= currentFilters.distance === 'custom' ? 'selected' : '' %>>Custom Distance</option>
                        <option value="all" <%= currentFilters.distance === 'all' ? 'selected' : '' %>>Any Distance</option>
                </select>
                    <input type="number" class="filter-input custom-distance-input" id="customDistanceInput" 
                           placeholder="Enter km" min="1" max="1000" 
                           value="<%= currentFilters.customDistance || '' %>"
                           style="display: none;">
                </div>
            </div>
            
            <div class="filter-group">
                <label class="filter-label">Sort By</label>
                <select class="filter-select" id="sortFilter">
                    <option value="distance" <%= currentFilters.sort === 'distance' ? 'selected' : '' %>>Distance</option>
                    <option value="newest" <%= currentFilters.sort === 'newest' ? 'selected' : '' %>>Newest First</option>
                    <option value="oldest" <%= currentFilters.sort === 'oldest' ? 'selected' : '' %>>Oldest First</option>
                    <option value="expiry" <%= currentFilters.sort === 'expiry' ? 'selected' : '' %>>Expiry Date</option>
                    <option value="name" <%= currentFilters.sort === 'name' ? 'selected' : '' %>>Name A-Z</option>
                </select>
            </div>
        </div>
        
        <!-- Location Notice -->
        <% if (!userLocation) { %>
            <div class="alert alert-info">
                <i class="fas fa-info-circle"></i>
                <div class="alert-content">
                    <h4>Location Required</h4>
                    <p>To see distance-based results, please update your profile with your complete address.</p>
                    <a href="/dashboard/profile" class="btn btn-primary">Update Profile</a>
                </div>
            </div>
        <% } %>
        
        <!-- Medicines Grid -->
        <div class="medicines-grid" id="medicinesGrid">
            <% if (medicines && medicines.length > 0) { %>
                <% medicines.forEach(medicine => { %>
                    <div class="medicine-card">
                        <div class="medicine-image">
                            <% if (medicine.imageUrl) { %>
                                <img src="<%= medicine.imageUrl %>" alt="<%= medicine.name %>">
                            <% } else { %>
                                <div class="default-medicine-image" data-category="<%= medicine.category || 'general' %>">
                                <i class="fas fa-capsules"></i>
                                    <div class="image-overlay">
                                        <span class="category-label"><%= medicine.category || 'Medicine' %></span>
                                    </div>
                                </div>
                            <% } %>
                            <div class="medicine-status status-<%= (medicine.displayStatus || medicine.status).toLowerCase() %>"><%= medicine.displayStatus || medicine.status %></div>
                        </div>
                        <div class="medicine-details">
                            <h4 class="medicine-name"><%= medicine.name %></h4>
                            <div class="medicine-info">
                                <div class="info-item">
                                    <i class="fas fa-capsules"></i>
                                    <span><%= medicine.availableQuantity || medicine.quantity %> <%= medicine.unit || 'tablets' %></span>
                                </div>
                                <div class="info-item">
                                    <i class="fas fa-calendar"></i>
                                    <span>Expires: <%= new Date(medicine.expiry).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) %></span>
                                </div>
                                <div class="info-item">
                                    <i class="fas fa-user"></i>
                                    <span>Donated by: <%= medicine.donor ? (medicine.donor.firstName || medicine.donor.email.split('@')[0]) : 'Anonymous' %></span>
                                </div>
                                <div class="info-item">
                                    <i class="fas fa-map-marker-alt"></i>
                                    <span><%= medicine.donor ? `${medicine.donor.city || ''}, ${medicine.donor.state || ''}` : 'Location not available' %></span>
                                </div>
                                <% if (medicine.distanceFormatted) { %>
                                    <div class="distance-badge">
                                        <i class="fas fa-location-arrow"></i> <%= medicine.distanceFormatted %>
                                    </div>
                                <% } %>
                            </div>
                            <div class="card-actions">
                                <button class="action-button btn-details view-details" data-id="<%= medicine._id %>">
                                    View Details
                                </button>
                                <button class="action-button btn-request" data-id="<%= medicine._id %>">
                                    Request
                                </button>
                            </div>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="empty-state" style="grid-column: 1 / -1; grid-row: 1 / -1;">
                    <i class="fas fa-search"></i>
                    <h4>No medicines found</h4>
                    <p>Try adjusting your filters or check back later for new donations.</p>
                    <a href="/dashboard/browse" class="btn btn-primary">Clear Filters</a>
                </div>
            <% } %>
        </div>
    </div>
    
    <!-- Medicine Details Modal -->
    <div class="browse-modal-overlay" id="medicineModal">
        <div class="browse-modal">
            <div class="browse-modal-header">
                <h3 class="browse-modal-title">Medicine Details</h3>
                <button class="browse-close-modal" id="closeModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="browse-modal-content">
                <div class="modal-image-section">
                    <div class="modal-image-gallery" id="modalImageGallery">
                        <!-- Images will be dynamically inserted here -->
                    </div>
                    <div class="modal-image-nav">
                        <button class="image-nav-btn prev-btn" id="prevImageBtn">
                            <i class="fas fa-chevron-left"></i>
                        </button>
                        <button class="image-nav-btn next-btn" id="nextImageBtn">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>
                    <div class="image-indicators" id="imageIndicators">
                        <!-- Indicators will be dynamically inserted here -->
                    </div>
                </div>
                <div class="modal-details">
                    <div class="detail-group">
                        <span class="detail-label"><i class="fas fa-capsules"></i> Medicine Name</span>
                        <span class="detail-value" id="medName"></span>
                    </div>
                    
                    <div class="detail-group">
                        <span class="detail-label"><i class="fas fa-info-circle"></i> Description</span>
                        <span class="detail-value" id="medDesc"></span>
                    </div>
                    
                    <div class="detail-group">
                        <span class="detail-label"><i class="fas fa-calculator"></i> Quantity</span>
                        <span class="detail-value" id="medQty"></span>
                    </div>
                    
                    <div class="detail-group">
                        <span class="detail-label"><i class="fas fa-calendar"></i> Expiry Date</span>
                        <span class="detail-value" id="medExpiry"></span>
                    </div>
                    
                    <div class="detail-group">
                        <span class="detail-label"><i class="fas fa-tag"></i> Category</span>
                        <span class="detail-value" id="medCategory"></span>
                    </div>
                    
                    <div class="detail-group">
                        <span class="detail-label"><i class="fas fa-user"></i> Donated By</span>
                        <span class="detail-value" id="medDonor"></span>
                    </div>
                    
                    <div class="detail-group">
                        <span class="detail-label"><i class="fas fa-map-marker-alt"></i> Pickup Location</span>
                        <div class="address-card">
                            <div class="detail-value" id="medAddress"></div>
                        </div>
                    </div>
                    
                    <div class="detail-group">
                        <span class="detail-label"><i class="fas fa-clock"></i> Donated On</span>
                        <span class="detail-value" id="medDonatedOn"></span>
                    </div>
                </div>
            </div>
            <div class="browse-modal-actions">
                <button class="btn-secondary" id="closeModalBtn">
                    Close
                </button>
                <button class="action-button btn-request" id="modalRequestBtn">
                    Request This Medicine
                </button>
            </div>
        </div>
    </div>

    <script>
        // Global variables and functions
        let medicines = [];
        let modal, closeModal, closeModalBtn;
        
        // Helper function to get medicine icon based on category
        function getMedicineIcon(category) {
            const iconMap = {
                'Pain Relief': 'fas fa-head-side-cough',
                'Fever': 'fas fa-thermometer-half',
                'Antibiotics': 'fas fa-shield-virus',
                'Vitamins': 'fas fa-apple-alt',
                'Diabetes': 'fas fa-tint',
                'Blood Pressure': 'fas fa-heartbeat',
                'Allergy': 'fas fa-wind',
                'Cough & Cold': 'fas fa-lungs',
                'Digestive': 'fas fa-stomach',
                'Skin Care': 'fas fa-spa',
                'Eye Care': 'fas fa-eye',
                'Dental': 'fas fa-tooth',
                'Women Health': 'fas fa-female',
                'Children': 'fas fa-baby',
                'Elderly': 'fas fa-user-plus',
                'First Aid': 'fas fa-first-aid',
                'General': 'fas fa-capsules'
            };
            
            return iconMap[category] || 'fas fa-capsules';
        }
            
            // Open modal function
            function openModal(medicineId) {
                const medicine = medicines.find(m => m._id === medicineId);
                if (!medicine) return;
                
                // Update modal content
                document.getElementById('medName').textContent = medicine.name;
                document.getElementById('medDesc').textContent = medicine.description || 'No description available';
                document.getElementById('medQty').textContent = `${medicine.quantity} ${medicine.unit || 'tablets'}`;
                document.getElementById('medExpiry').textContent = new Date(medicine.expiry).toLocaleDateString('en-US', { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                });
                document.getElementById('medCategory').textContent = medicine.category || 'Uncategorized';
                document.getElementById('medDonor').textContent = medicine.donor ? 
                    (medicine.donor.firstName || medicine.donor.email.split('@')[0]) : 'Anonymous';
                document.getElementById('medDonatedOn').textContent = new Date(medicine.createdAt).toLocaleDateString('en-US', { 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                });
            
            // Debug: Log medicine data
            console.log('🔍 Medicine data:', {
                name: medicine.name,
                imageUrl: medicine.imageUrl,
                imageUrlType: typeof medicine.imageUrl,
                hasImageUrl: !!medicine.imageUrl
            });
            
            // Update modal image gallery
            updateModalImageGallery(medicine);
                
                // Address
                let address = 'Location not available';
                if (medicine.donor && medicine.donor.addressLine1) {
                    address = `${medicine.donor.addressLine1}`;
                    if (medicine.donor.city) address += `, ${medicine.donor.city}`;
                    if (medicine.donor.state) address += `, ${medicine.donor.state}`;
                    if (medicine.donor.pincode) address += ` ${medicine.donor.pincode}`;
                }
                document.getElementById('medAddress').textContent = address;
                
                // Set request button data
                document.getElementById('modalRequestBtn').setAttribute('data-id', medicineId);
                
                modal.classList.add('active');
                // Don't change body overflow to prevent scroll bars
            }
        
        // Update modal image gallery
        function updateModalImageGallery(medicine) {
            const gallery = document.getElementById('modalImageGallery');
            const indicators = document.getElementById('imageIndicators');
            const prevBtn = document.getElementById('prevImageBtn');
            const nextBtn = document.getElementById('nextImageBtn');
            
            // Clear existing content
            gallery.innerHTML = '';
            indicators.innerHTML = '';
            
            // Get images (support for multiple images)
            const images = [];
            if (medicine.imageUrl) {
                // Handle different image formats
                if (Array.isArray(medicine.imageUrl)) {
                    // If it's already an array
                    images.push(...medicine.imageUrl);
                } else if (typeof medicine.imageUrl === 'string') {
                    // If it's a string, split by comma
                    const imageUrls = medicine.imageUrl.split(',').map(url => url.trim());
                    images.push(...imageUrls);
                }
                console.log('🖼️ Found images:', images.length, images);
            }
            
            // For testing: Add some sample images if no images found
            if (images.length === 0 && medicine.imageUrl) {
                // If there's an imageUrl but parsing failed, treat it as a single image
                images.push(medicine.imageUrl);
                console.log('🖼️ Added single image:', medicine.imageUrl);
            }
            
            // For testing: Add sample images to demonstrate gallery functionality
            // Remove this section once you confirm the gallery works
            if (images.length === 1) {
                // Add 2 more sample images for testing
                const sampleImages = [
                    'https://images.unsplash.com/photo-1584308666744-24d5c474f2ae?w=400&h=300&fit=crop',
                    'https://images.unsplash.com/photo-1559757148-5c350d0d3c56?w=400&h=300&fit=crop'
                ];
                images.push(...sampleImages);
                console.log('🧪 Added test images for gallery demonstration');
            }
            
            if (images.length === 0) {
                // Show default image with category-specific icon
                const icon = getMedicineIcon(medicine.category);
                gallery.innerHTML = `
                    <div class="modal-default-image">
                        <i class="${icon}"></i>
                        <div class="modal-image-overlay">
                            <span class="modal-category-label">${medicine.category || 'Medicine'}</span>
                        </div>
                    </div>
                `;
                
                // Hide navigation and indicators
                prevBtn.style.display = 'none';
                nextBtn.style.display = 'none';
                indicators.style.display = 'none';
            } else {
                // Show images with navigation
                images.forEach((imageUrl, index) => {
                    const slide = document.createElement('div');
                    slide.className = `modal-image-slide ${index === 0 ? 'active' : ''}`;
                    slide.innerHTML = `<img src="${imageUrl}" alt="${medicine.name} - Image ${index + 1}">`;
                    gallery.appendChild(slide);
                    
                    // Create indicator
                    const indicator = document.createElement('div');
                    indicator.className = `image-indicator ${index === 0 ? 'active' : ''}`;
                    indicator.onclick = () => showImage(index);
                    indicators.appendChild(indicator);
                });
                
                // Show/hide navigation based on image count
                if (images.length > 1) {
                    prevBtn.style.display = 'flex';
                    nextBtn.style.display = 'flex';
                    indicators.style.display = 'flex';
                    
                    console.log('🖼️ Setting up navigation for', images.length, 'images');
                    
                    // Set up navigation
                    let currentImage = 0;
                    
                    prevBtn.onclick = () => {
                        currentImage = (currentImage - 1 + images.length) % images.length;
                        console.log('🖼️ Previous clicked, showing image:', currentImage);
                        showImage(currentImage);
                    };
                    
                    nextBtn.onclick = () => {
                        currentImage = (currentImage + 1) % images.length;
                        console.log('🖼️ Next clicked, showing image:', currentImage);
                        showImage(currentImage);
                    };
                } else {
                    prevBtn.style.display = 'none';
                    nextBtn.style.display = 'none';
                    indicators.style.display = 'none';
                    console.log('🖼️ Single image, hiding navigation');
                }
            }
            
            // Global showImage function
            window.showImage = function(index) {
                console.log('🖼️ Showing image:', index);
                // Hide all slides
                document.querySelectorAll('.modal-image-slide').forEach(slide => {
                    slide.classList.remove('active');
                });
                
                // Remove active from all indicators
                document.querySelectorAll('.image-indicator').forEach(ind => {
                    ind.classList.remove('active');
                });
                
                // Show selected slide and indicator
                const slides = document.querySelectorAll('.modal-image-slide');
                const indicators = document.querySelectorAll('.image-indicator');
                
                if (slides[index]) {
                    slides[index].classList.add('active');
                }
                if (indicators[index]) {
                    indicators[index].classList.add('active');
                }
            };
            }
            
            // Close modal function
            function closeModalFunc() {
                modal.classList.remove('active');
                // Don't change body overflow to prevent scroll bars
            }
            
        document.addEventListener('DOMContentLoaded', function() {
            modal = document.getElementById('medicineModal');
            closeModal = document.getElementById('closeModal');
            closeModalBtn = document.getElementById('closeModalBtn');
            const viewButtons = document.querySelectorAll('.btn-view');            
            // Medicine data from backend
            medicines = <%- JSON.stringify(medicines || []) %>;
            

            
            // Initial event listeners setup
            setupEventDelegation();
            attachEventListeners();
            
            // Update default medicine images with category-specific icons
            function updateDefaultImages() {
                const defaultImages = document.querySelectorAll('.default-medicine-image');
                defaultImages.forEach(container => {
                    const category = container.getAttribute('data-category');
                    const icon = container.querySelector('i');
                    if (icon && category) {
                        const newIcon = getMedicineIcon(category);
                        icon.className = newIcon;
                    }
                });
            }
            
            // Initialize default images
            updateDefaultImages();
            
            // AJAX Filtering
            let filterTimeout;
            const searchFilter = document.getElementById('searchFilter');
            const categoryFilter = document.getElementById('categoryFilter');
            const distanceFilter = document.getElementById('distanceFilter');
            const customDistanceInput = document.getElementById('customDistanceInput');
            const sortFilter = document.getElementById('sortFilter');
            const clearFiltersBtn = document.getElementById('clearFiltersBtn');
            const medicinesGrid = document.getElementById('medicinesGrid');
            const resultsCount = document.querySelector('.results-count');
            
            // Debounced search function
            function debounceSearch() {
                clearTimeout(filterTimeout);
                filterTimeout = setTimeout(applyFilters, 500);
            }
            
            // Apply filters function
            async function applyFilters() {
                const distanceFilterValue = distanceFilter.value;
                
                // Handle "Any Distance" - don't send distance filter
                const filters = {
                    search: searchFilter.value,
                    category: categoryFilter.value,
                    sort: sortFilter.value
                };
                
                // Handle distance filter
                if (distanceFilterValue === 'all') {
                    // Explicitly send "all" to indicate no distance filtering
                    filters.distance = 'all';
                } else if (distanceFilterValue === 'custom') {
                    filters.customDistance = customDistanceInput.value || '50';
                } else {
                    filters.distance = distanceFilterValue;
                }
                
                // Show loading state
                medicinesGrid.innerHTML = '<div class="loading-state" style="grid-column: 1 / -1; text-align: center; padding: 40px;"><i class="fas fa-spinner fa-spin" style="font-size: 24px; color: var(--primary);"></i><p style="margin-top: 10px; color: var(--gray);">Loading medicines...</p></div>';
                
                try {
                    const queryString = new URLSearchParams(filters).toString();
                    console.log('📤 Sending filters:', filters);
                    console.log('📤 Query string:', queryString);
                    const response = await fetch(`/dashboard/browse?${queryString}`, {
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        console.log('📊 Received medicines data:', data.medicines.length, 'medicines');
                        console.log('📊 Sample medicine:', data.medicines[0]);
                        updateMedicinesGrid(data.medicines);
                        updateResultsCount(data.medicines.length);
                    } else {
                        throw new Error('Failed to fetch medicines');
                    }
                } catch (error) {
                    console.error('Filter error:', error);
                    medicinesGrid.innerHTML = '<div class="error-state" style="grid-column: 1 / -1; text-align: center; padding: 40px; color: var(--accent);"><i class="fas fa-exclamation-triangle"></i><p style="margin-top: 10px;">Error loading medicines. Please try again.</p></div>';
                }
            }
            
            // Update medicines grid
            function updateMedicinesGrid(newMedicines) {
                // Update global medicines array
                medicines = newMedicines;
                
                if (!medicines || medicines.length === 0) {
                    medicinesGrid.innerHTML = `
                        <div class="empty-state" style="grid-column: 1 / -1; grid-row: 1 / -1;">
                            <i class="fas fa-search"></i>
                            <h4>No medicines found</h4>
                            <p>Try adjusting your filters or check back later for new donations.</p>
                            <button class="btn btn-primary" onclick="clearFilters()">Clear Filters</button>
                        </div>
                    `;
                    return;
                }
                
                console.log('🔍 Rendering medicines:', medicines.length);
                medicines.forEach((medicine, index) => {
                    console.log(`🔍 Medicine ${index}:`, {
                        name: medicine.name,
                        distance: medicine.distance,
                        distanceFormatted: medicine.distanceFormatted,
                        hasDistance: !!medicine.distance,
                        hasDistanceFormatted: !!medicine.distanceFormatted
                });
            });
                
                const medicinesHTML = medicines.map(medicine => `
                    <div class="medicine-card">
                        <div class="medicine-image">
                            ${medicine.imageUrl ? 
                                `<img src="${medicine.imageUrl}" alt="${medicine.name}">` : 
                                `<div class="default-medicine-image" data-category="${medicine.category || 'general'}">
                                    <i class="fas fa-capsules"></i>
                                    <div class="image-overlay">
                                        <span class="category-label">${medicine.category || 'Medicine'}</span>
                                    </div>
                                </div>`
                            }
                            <div class="medicine-status status-${(medicine.displayStatus || medicine.status).toLowerCase()}">${medicine.displayStatus || medicine.status}</div>
                        </div>
                        <div class="medicine-details">
                            <h4 class="medicine-name">${medicine.name}</h4>
                            <div class="medicine-info">
                                <div class="info-item">
                                    <i class="fas fa-capsules"></i>
                                    <span>${medicine.availableQuantity || medicine.quantity} ${medicine.unit || 'tablets'}</span>
                                </div>
                                <div class="info-item">
                                    <i class="fas fa-calendar"></i>
                                    <span>Expires: ${new Date(medicine.expiry).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}</span>
                                </div>
                                <div class="info-item">
                                    <i class="fas fa-user"></i>
                                    <span>Donated by: ${medicine.donor ? (medicine.donor.firstName || medicine.donor.email.split('@')[0]) : 'Anonymous'}</span>
                                </div>
                                <div class="info-item">
                                    <i class="fas fa-map-marker-alt"></i>
                                    <span>${medicine.donor ? `${medicine.donor.city || ''}, ${medicine.donor.state || ''}` : 'Location not available'}</span>
                                </div>
                                ${medicine.distanceFormatted ? 
                                    `<div class="distance-badge">
                                        <i class="fas fa-location-arrow"></i> ${medicine.distanceFormatted}
                                    </div>` : 
                                    medicine.distance ? 
                                    `<div class="distance-badge">
                                        <i class="fas fa-location-arrow"></i> ${medicine.distance.toFixed(1)} km
                                    </div>` : 
                                    `<div class="distance-badge">
                                        <i class="fas fa-location-arrow"></i> Distance unknown
                                    </div>`
                                }
                            </div>
                            <div class="card-actions">
                                <button class="action-button btn-details view-details" data-id="${medicine._id}">
                                    View Details
                                </button>
                                <button class="action-button btn-request" data-id="${medicine._id}">
                                    Request
                                </button>
                            </div>
                        </div>
                    </div>
                `).join('');
                
                medicinesGrid.innerHTML = medicinesHTML;
                
                // Update default images (event listeners are handled by delegation)
                updateDefaultImages();
            }
            
            // Update results count
            function updateResultsCount(count) {
                resultsCount.textContent = `${count} available medicines`;
            }
            

            
            // Clear filters function
            function clearFilters() {
                searchFilter.value = '';
                categoryFilter.value = '';
                distanceFilter.value = '50';
                customDistanceInput.value = '';
                customDistanceInput.style.display = 'none';
                sortFilter.value = 'distance';
                applyFilters();
            }
            
            // Use event delegation to prevent duplicate listeners
            function setupEventDelegation() {
                // Use event delegation for view details buttons
                document.addEventListener('click', function(e) {
                    if (e.target.closest('.view-details')) {
                        const button = e.target.closest('.view-details');
                        const medicineId = button.getAttribute('data-id');
                        if (medicineId) {
                            openModal(medicineId);
                        }
                    }
                    
                    // Use event delegation for request buttons
                    if (e.target.closest('.btn-request')) {
                        const button = e.target.closest('.btn-request');
                        const medicineId = button.getAttribute('data-id');
                        console.log('🔘 Request button clicked, medicineId:', medicineId);
                        if (medicineId) {
                            requestMedicine(medicineId);
                        }
                    }
                });
            }
            
            // Attach event listeners to new elements (simplified)
            function attachEventListeners() {
                // Re-attach modal close event listeners (these are static)
                if (closeModal) {
            closeModal.addEventListener('click', closeModalFunc);
                }
                if (closeModalBtn) {
            closeModalBtn.addEventListener('click', closeModalFunc);
                }
            
            // Close modal when clicking outside
                if (modal) {
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    closeModalFunc();
                }
            });
                }
            }
            
            // Handle custom distance input visibility
            function handleDistanceFilterChange() {
                if (distanceFilter.value === 'custom') {
                    customDistanceInput.style.display = 'block';
                    customDistanceInput.focus();
                } else {
                    customDistanceInput.style.display = 'none';
                }
            }
            
            // Event listeners for filters
            searchFilter.addEventListener('input', debounceSearch);
            categoryFilter.addEventListener('change', applyFilters);
            distanceFilter.addEventListener('change', () => {
                handleDistanceFilterChange();
                applyFilters();
            });
            customDistanceInput.addEventListener('input', debounceSearch);
            sortFilter.addEventListener('change', applyFilters);
            clearFiltersBtn.addEventListener('click', clearFilters);
            
            // Make clearFilters globally available
            window.clearFilters = clearFilters;
            
            // Initialize custom distance input visibility
            handleDistanceFilterChange();
        });
        
        // Request medicine function
        async function requestMedicine(medicineId) {
            // Get medicine details to show available quantity
            const medicineCard = document.querySelector(`[data-id="${medicineId}"]`).closest('.medicine-card');
            const quantityText = medicineCard.querySelector('.info-item span').textContent;
            
            // More robust quantity and unit extraction
            const quantityMatch = quantityText.match(/(\d+)\s*([a-zA-Z]+)/);
            if (!quantityMatch) {
                showErrorModal('Could not determine available quantity');
                return;
            }
            
            const availableQuantity = parseInt(quantityMatch[1]);
            const unit = quantityMatch[2];
            
            console.log('Medicine details:', { availableQuantity, unit, quantityText });
            
            showConfirmationModal('Please specify the quantity you want to request:', async () => {
                try {
                    const quantityInput = document.querySelector('#requestQuantity');
                    const requestedQuantity = parseInt(quantityInput.value) || 1;
                    const message = document.querySelector('#requestMessage').value || 'I would like to request this medicine.';
                    
                    if (requestedQuantity > availableQuantity) {
                        showErrorModal(`You can only request up to ${availableQuantity} ${unit}`);
                        return;
                    }
                    
                    if (requestedQuantity <= 0) {
                        showErrorModal('Please enter a valid quantity');
                        return;
                    }
                    
                    console.log('Sending request:', { medicineId, requestedQuantity, message });
                    
                    const response = await fetch(`/dashboard/request-medicine/${medicineId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            quantity: requestedQuantity,
                            message: message
                        })
                    });
                    
                    console.log('Response status:', response.status);
                    
                    if (!response.ok) {
                        const errorText = await response.text();
                        console.error('Server error response:', errorText);
                        throw new Error(`Server error: ${response.status} - ${errorText}`);
                    }
                    
                    const result = await response.json();
                    console.log('Response result:', result);
                    
                    if (result.success) {
                        showSuccessModal('Request submitted successfully! The donor will contact you to arrange pickup.');
                        // Close modal if open
                        const modal = document.getElementById('medicineModal');
                        if (modal.classList.contains('active')) {
                            modal.classList.remove('active');
                            // Don't change body overflow to prevent scroll bars
                        }
                        // Refresh the page after a short delay to show updated status
                        setTimeout(() => {
                            window.location.reload();
                        }, 2000);
                    } else {
                        showErrorModal('Error: ' + result.error);
                    }
                } catch (error) {
                    console.error('Request error:', error);
                    showErrorModal('Error submitting request. Please try again.');
                }
            }, availableQuantity, unit);
        }
        
        // Show confirmation modal
        function showConfirmationModal(message, onConfirm, availableQuantity, unit) {
            const confirmationModal = document.createElement('div');
            confirmationModal.className = 'confirmation-modal-overlay';
            confirmationModal.innerHTML = `
                <div class="confirmation-modal">
                    <div class="confirmation-header">
                        <i class="fas fa-hand-holding-medical"></i>
                        <h3>Request Medicine</h3>
                    </div>
                    <div class="confirmation-content">
                        <p>${message}</p>
                        <div class="quantity-selection">
                            <label for="requestQuantity">
                                <i class="fas fa-capsules"></i> Quantity
                                <span class="available-info">(Available: ${availableQuantity} ${unit})</span>
                            </label>
                            <div class="quantity-input-wrapper">
                                <input type="number" id="requestQuantity" min="1" max="${availableQuantity}" value="1" class="quantity-input">
                                <div class="quantity-buttons">
                                    <button type="button" class="qty-btn" onclick="adjustQuantity(-1)">-</button>
                                    <button type="button" class="qty-btn" onclick="adjustQuantity(1)">+</button>
                                </div>
                            </div>
                        </div>
                        <div class="message-selection">
                            <label for="requestMessage">
                                <i class="fas fa-comment-alt"></i> Message to Donor
                                <span class="optional-text">(optional)</span>
                            </label>
                            <textarea id="requestMessage" placeholder="Tell the donor why you need this medicine or any special requirements..." class="message-input"></textarea>
                        </div>
                    </div>
                    <div class="confirmation-actions">
                        <button class="btn-cancel" onclick="closeConfirmationModal()">
                            <i class="fas fa-times"></i> Cancel
                        </button>
                        <button class="btn-confirm" onclick="confirmRequest()">
                            <i class="fas fa-paper-plane"></i> Send Request
                        </button>
                    </div>
                </div>
            `;
            
            document.body.appendChild(confirmationModal);
            
            // Store the callback
            window.confirmCallback = onConfirm;
            
            // Show modal with animation
            setTimeout(() => {
                confirmationModal.classList.add('active');
            }, 10);
        }
        
        // Show success modal
        function showSuccessModal(message) {
            const successModal = document.createElement('div');
            successModal.className = 'success-modal-overlay';
            successModal.innerHTML = `
                <div class="success-modal">
                    <div class="success-header">
                        <i class="fas fa-check-circle"></i>
                        <h3>Success!</h3>
                    </div>
                    <div class="success-content">
                        <p>${message}</p>
                    </div>
                    <div class="success-actions">
                        <button class="btn-ok" onclick="closeSuccessModal()">
                            <i class="fas fa-check"></i> OK
                        </button>
                    </div>
                </div>
            `;
            
            document.body.appendChild(successModal);
            
            // Show modal with animation
            setTimeout(() => {
                successModal.classList.add('active');
            }, 10);
        }
        
        // Show error modal
        function showErrorModal(message) {
            const errorModal = document.createElement('div');
            errorModal.className = 'error-modal-overlay';
            errorModal.innerHTML = `
                <div class="error-modal">
                    <div class="error-header">
                        <i class="fas fa-exclamation-triangle"></i>
                        <h3>Error</h3>
                    </div>
                    <div class="error-content">
                        <p>${message}</p>
                    </div>
                    <div class="error-actions">
                        <button class="btn-ok" onclick="closeErrorModal()">
                            <i class="fas fa-times"></i> OK
                        </button>
                    </div>
                </div>
            `;
            
            document.body.appendChild(errorModal);
            
            // Show modal with animation
            setTimeout(() => {
                errorModal.classList.add('active');
            }, 10);
        }
        
        // Close confirmation modal
        function closeConfirmationModal() {
            const modal = document.querySelector('.confirmation-modal-overlay');
            if (modal) {
                modal.classList.remove('active');
                setTimeout(() => {
                    modal.remove();
                }, 300);
            }
        }
        
        // Adjust quantity function
        function adjustQuantity(change) {
            const quantityInput = document.getElementById('requestQuantity');
            if (quantityInput) {
                const currentValue = parseInt(quantityInput.value) || 1;
                const maxValue = parseInt(quantityInput.max) || 1;
                const newValue = Math.max(1, Math.min(maxValue, currentValue + change));
                quantityInput.value = newValue;
                
                // Add visual feedback
                quantityInput.style.transform = 'scale(1.05)';
                setTimeout(() => {
                    quantityInput.style.transform = 'scale(1)';
                }, 150);
            }
        }
        
        // Confirm request
        function confirmRequest() {
            if (window.confirmCallback) {
                window.confirmCallback();
            }
            closeConfirmationModal();
        }
        
        // Close success modal
        function closeSuccessModal() {
            const modal = document.querySelector('.success-modal-overlay');
            if (modal) {
                modal.classList.remove('active');
                setTimeout(() => {
                    modal.remove();
                }, 300);
            }
        }
        
        // Close error modal
        function closeErrorModal() {
            const modal = document.querySelector('.error-modal-overlay');
            if (modal) {
                modal.classList.remove('active');
                setTimeout(() => {
                    modal.remove();
                }, 300);
            }
        }
    </script>
</div>