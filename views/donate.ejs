    <!-- Donate Medicines Section -->
     <div class="main-content">
    <div class="donate-container" style="padding-top: 0px; margin-top: 0px;">
        <!-- Form Header -->
        <div class="form-header">
            <div class="form-icon">
                <i class="fas fa-pills"></i>
            </div>
            <div>
                <h2 class="form-title">Donate Medicines</h2>
                <p class="form-subtitle">Help others by donating unused medicines. Your contribution can save lives.</p>
            </div>
        </div>
        
        <!-- Toast Notification Container -->
        <div id="toast-container"></div>
        
        <!-- Flash Messages -->
        <% if (messages.error) { %>
            <div class="alert alert-error">
                <i class="fas fa-exclamation-circle"></i>
                <span><%= messages.error %></span>
            </div>
        <% } %>
        
        <% if (messages.success) { %>
            <div class="alert alert-success">
                <i class="fas fa-check-circle"></i>
                <span><%= messages.success %></span>
            </div>
        <% } %>
        
        <!-- Donate Form Container -->
        <div class="donate-form-container">
            <div class="form-content">
                <form id="donate-form" action="/donate" method="POST" enctype="multipart/form-data">
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label" for="name">
                                <i class="fas fa-capsules"></i> Medicine Name<span class="required-star">*</span>
                            </label>
                            <input type="text" id="name" name="name" class="form-input" placeholder="e.g., Paracetamol 500mg" required>
                            <div class="validation-message" id="name-validation"></div>
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="quantity">
                                <i class="fas fa-calculator"></i> Quantity<span class="required-star">*</span>
                            </label>
                            <input type="number" id="quantity" name="quantity" class="form-input" placeholder="Number of tablets/capsules" min="1" required>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label" for="unit">
                                <i class="fas fa-box"></i> Unit
                            </label>
                            <select id="unit" name="unit" class="form-select">
                                <option value="Tablets">Tablets</option>
                                <option value="Capsules">Capsules</option>
                                <option value="Bottles">Bottles</option>
                                <option value="Strips">Strips</option>
                                <option value="Pieces">Pieces</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="expiry">
                                <i class="fas fa-calendar"></i> Expiry Date<span class="required-star">*</span>
                            </label>
                            <input type="date" id="expiry" name="expiry" class="form-input" required>
                            <div class="validation-message" id="expiry-validation"></div>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label" for="dosage">
                                <i class="fas fa-prescription-bottle"></i> Dosage
                            </label>
                            <input type="text" id="dosage" name="dosage" class="form-input" placeholder="e.g., 500mg per tablet">
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="manufacturer">
                                <i class="fas fa-industry"></i> Manufacturer
                            </label>
                            <input type="text" id="manufacturer" name="manufacturer" class="form-input" placeholder="Pharmaceutical company">
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label" for="category">
                                <i class="fas fa-tag"></i> Category<span class="required-star">*</span>
                            </label>
                            <select id="category" name="category" class="form-select" required>
                                <option value="">Select category</option>
                                <% categories.forEach(category => { %>
                                    <option value="<%= category.value %>"><%= category.label %></option>
                                <% }); %>
                            </select>
                            <div class="validation-message" id="category-validation"></div>
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="condition">
                                <i class="fas fa-box-open"></i> Condition<span class="required-star">*</span>
                            </label>
                            <select id="condition" name="condition" class="form-select" required>
                                <option value="">Select condition</option>
                                <option value="new">Unopened (Sealed and intact packaging)</option>
                                <option value="opened">Opened but Unused (Packaging opened but pills untouched)</option>
                                <option value="partial">Partially Used (Some pills used from the package)</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group full-width">
                            <label class="form-label" for="description">
                                <i class="fas fa-notes-medical"></i> Additional Notes
                            </label>
                            <textarea id="description" name="description" class="form-textarea" placeholder="Any special instructions or details about the medicine"></textarea>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group full-width">
                            <label class="form-label">
                                <i class="fas fa-images"></i> Upload Photos (Optional)
                            </label>
                            <div class="image-upload-container">
                                <div class="upload-area" id="upload-area">
                                    <div class="upload-icon">
                                        <i class="fas fa-cloud-upload-alt"></i>
                                    </div>
                                    <div class="upload-text">Drag & drop or click to upload photos</div>
                                    <div class="upload-hint">Max 3 photos (JPG, PNG, max 5MB each)</div>
                                    <div class="upload-button">Select Images</div>
                                    <input type="file" id="images" name="images" accept="image/*" multiple style="display: none;">
                                </div>
                                <div class="preview-container" id="preview-container">
                                    <!-- Image previews will be added here -->
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="submit-container">
                        <button type="submit" class="submit-button" id="submit-btn">
                            <i class="fas fa-paper-plane"></i> Submit Donation
                        </button>
                        <div class="loading-spinner" id="loading-spinner" style="display: none;">
                            <i class="fas fa-spinner fa-spin"></i> Processing...
                        </div>
                    </div>
                </form>
            </div>
        </div>
        
        <!-- Success Modal (Initially Hidden) -->
        <div class="success-modal" id="success-modal" style="display: none;">
            <div class="modal-overlay"></div>
            <div class="modal-content">
                <div class="success-icon">
                    <i class="fas fa-check-circle"></i>
                </div>
                <h3 class="success-title">Thank You for Your Donation!</h3>
                <p class="success-text">
                    Your medicine donation has been submitted successfully. It is now available for requests 
                    and will help those in need. You can track your donation in your dashboard.
                </p>
                <div class="modal-actions">
                    <a href="/dashboard" class="back-to-dashboard">
                        <i class="fas fa-arrow-left"></i> Back to Dashboard
                    </a>
                    <button class="close-modal" onclick="closeSuccessModal()" style="margin: 10px 0px 0px; ">
                        <i class="fas fa-times"></i> Close
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('donate-form');
            const uploadArea = document.getElementById('upload-area');
            const fileInput = document.getElementById('images');
            const previewContainer = document.getElementById('preview-container');
            const successModal = document.getElementById('success-modal');
            const submitBtn = document.getElementById('submit-btn');
            const loadingSpinner = document.getElementById('loading-spinner');
            
            // Validation elements
            const nameInput = document.getElementById('name');
            const expiryInput = document.getElementById('expiry');
            const categoryInput = document.getElementById('category');
            const nameValidation = document.getElementById('name-validation');
            const expiryValidation = document.getElementById('expiry-validation');
            const categoryValidation = document.getElementById('category-validation');
            
            // Check profile completeness on page load
            checkProfileCompleteness();
            
            async function checkProfileCompleteness() {
                try {
                    const response = await fetch('/donate/check-profile');
                    const data = await response.json();
                    
                    if (!data.hasAddress) {
                        const alertDiv = document.createElement('div');
                        alertDiv.className = 'alert alert-warning';
                        alertDiv.innerHTML = `
                            <i class="fas fa-exclamation-triangle"></i>
                            <div>
                                <strong>Profile Incomplete</strong><br>
                                Please complete your address information in your profile before donating medicines. 
                                This is required for pickup arrangements.
                                <a href="/dashboard/profile" class="btn btn-primary" style="margin-top: 10px; display: inline-block;">
                                    <i class="fas fa-user-edit"></i> Complete Profile
                                </a>
                            </div>
                        `;
                        
                        // Insert alert at the top of the form
                        const formHeader = document.querySelector('.form-header');
                        formHeader.parentNode.insertBefore(alertDiv, formHeader.nextSibling);
                        
                        // Disable form submission
                        submitBtn.disabled = true;
                        submitBtn.textContent = 'Complete Profile First';
                        submitBtn.className = 'submit-button disabled';
                    }
                } catch (error) {
                    console.error('Profile check error:', error);
                }
            }
            
            // Set minimum date for expiry (today)
            const today = new Date().toISOString().split('T')[0];
            expiryInput.setAttribute('min', today);
            
            // Real-time name validation
            let nameValidationTimeout;
            nameInput.addEventListener('input', function() {
                clearTimeout(nameValidationTimeout);
                nameValidationTimeout = setTimeout(async function() {
                    const name = nameInput.value.trim();
                    if (name.length >= 3) {
                        try {
                            const response = await fetch('/donate/validate-name', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ name })
                            });
                            const data = await response.json();
                            
                            if (data.valid) {
                                nameValidation.textContent = '';
                                nameValidation.className = 'validation-message';
                            } else {
                                nameValidation.textContent = data.message;
                                nameValidation.className = 'validation-message error';
                            }
                        } catch (error) {
                            console.error('Name validation error:', error);
                        }
                    } else {
                        nameValidation.textContent = '';
                        nameValidation.className = 'validation-message';
                    }
                }, 500);
            });
            
            // Real-time expiry validation
            let expiryValidationTimeout;
            expiryInput.addEventListener('change', function() {
                clearTimeout(expiryValidationTimeout);
                expiryValidationTimeout = setTimeout(async function() {
                    const expiry = expiryInput.value;
                    if (expiry) {
                        try {
                            const response = await fetch('/donate/validate-expiry', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ expiry })
                            });
                            const data = await response.json();
                            
                            if (data.valid) {
                                if (data.warning) {
                                    expiryValidation.textContent = data.warning;
                                    expiryValidation.className = 'validation-message warning';
                                } else {
                                    expiryValidation.textContent = '';
                                    expiryValidation.className = 'validation-message';
                                }
                            } else {
                                expiryValidation.textContent = data.message;
                                expiryValidation.className = 'validation-message error';
                            }
                        } catch (error) {
                            console.error('Expiry validation error:', error);
                        }
                    } else {
                        expiryValidation.textContent = '';
                        expiryValidation.className = 'validation-message';
                    }
                }, 300);
            });
            
            // Real-time category validation
            categoryInput.addEventListener('change', function() {
                const category = categoryInput.value;
                if (!category) {
                    categoryValidation.textContent = 'Please select a category';
                    categoryValidation.className = 'validation-message error';
                } else {
                    categoryValidation.textContent = '';
                    categoryValidation.className = 'validation-message';
                }
            });
            
            // File upload handling
            uploadArea.addEventListener('click', () => {
                fileInput.click();
            });
            
            uploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                uploadArea.style.borderColor = 'var(--primary)';
                uploadArea.style.backgroundColor = 'rgba(42, 124, 199, 0.1)';
            });
            
            uploadArea.addEventListener('dragleave', () => {
                uploadArea.style.borderColor = 'var(--light-gray)';
                uploadArea.style.backgroundColor = 'rgba(255, 255, 255, 0.5)';
            });
            
            uploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                uploadArea.style.borderColor = 'var(--light-gray)';
                uploadArea.style.backgroundColor = 'rgba(255, 255, 255, 0.5)';
                
                if (e.dataTransfer.files.length) {
                    handleFiles(e.dataTransfer.files);
                }
            });
            
            fileInput.addEventListener('change', () => {
                if (fileInput.files.length) {
                    // Check if more than 3 files are selected
                                    if (fileInput.files.length > 3) {
                    showToast('error', 'File Limit Exceeded', 'Maximum 3 images allowed. Please select fewer files.');
                    fileInput.value = ''; // Clear the input
                    return;
                }
                    handleFiles(fileInput.files);
                }
            });
            
            function handleFiles(files) {
                // Clear previous previews
                previewContainer.innerHTML = '';
                
                // Check file count
                if (files.length > 3) {
                    showToast('warning', 'File Limit', 'Maximum 3 images allowed. Only the first 3 will be processed.');
                }
                
                // Limit to 3 images
                const filesToProcess = Array.from(files).slice(0, 3);
                
                filesToProcess.forEach(file => {
                    if (!file.type.match('image.*')) {
                        alert('Please upload only image files (JPG, PNG)');
                        return;
                    }
                    
                    if (file.size > 5 * 1024 * 1024) {
                        alert('File size should be less than 5MB');
                        return;
                    }
                    
                    const reader = new FileReader();
                    
                    reader.onload = function(e) {
                        const previewDiv = document.createElement('div');
                        previewDiv.className = 'image-preview-container';
                        
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.classList.add('image-preview');
                        
                        const removeBtn = document.createElement('button');
                        removeBtn.className = 'remove-image';
                        removeBtn.innerHTML = '<i class="fas fa-times"></i>';
                        removeBtn.onclick = function() {
                            previewDiv.remove();
                        };
                        
                        previewDiv.appendChild(img);
                        previewDiv.appendChild(removeBtn);
                        previewContainer.appendChild(previewDiv);
                    };
                    
                    reader.readAsDataURL(file);
                });
            }
            
            // Form data preservation
            function saveFormData() {
                const formData = {
                    name: nameInput.value,
                    quantity: document.getElementById('quantity').value,
                    unit: document.getElementById('unit').value,
                    expiry: expiryInput.value,
                    dosage: document.getElementById('dosage').value,
                    manufacturer: document.getElementById('manufacturer').value,
                    category: categoryInput.value,
                    condition: (() => {
                        const checkedInput = document.querySelector('input[name="condition"]:checked');
                        return checkedInput ? checkedInput.value : null;
                    })(),
                    description: document.getElementById('description').value
                };
                sessionStorage.setItem('donateFormData', JSON.stringify(formData));
            }

            function restoreFormData() {
                const savedData = sessionStorage.getItem('donateFormData');
                if (savedData) {
                    const formData = JSON.parse(savedData);
                    
                    nameInput.value = formData.name || '';
                    document.getElementById('quantity').value = formData.quantity || '';
                    document.getElementById('unit').value = formData.unit || 'Tablets';
                    expiryInput.value = formData.expiry || '';
                    document.getElementById('dosage').value = formData.dosage || '';
                    document.getElementById('manufacturer').value = formData.manufacturer || '';
                    categoryInput.value = formData.category || '';
                    if (formData.condition) {
                        const conditionInput = document.querySelector(`input[name="condition"][value="${formData.condition}"]`);
                        if (conditionInput) {
                            conditionInput.checked = true;
                        }
                    }
                    document.getElementById('description').value = formData.description || '';
                    
                    // Clear saved data after restoring
                    sessionStorage.removeItem('donateFormData');
                }
            }

            // Restore form data on page load
            restoreFormData();

            // Toast notification function
            function showToast(type, title, message, duration = 5000) {
                const toastContainer = document.getElementById('toast-container');
                const toast = document.createElement('div');
                toast.className = `toast ${type}`;
                
                const iconMap = {
                    success: 'fas fa-check-circle',
                    error: 'fas fa-exclamation-circle',
                    warning: 'fas fa-exclamation-triangle',
                    info: 'fas fa-info-circle'
                };
                
                toast.innerHTML = `
                    <i class="toast-icon ${iconMap[type]}"></i>
                    <div class="toast-content">
                        <div class="toast-title">${title}</div>
                        <div class="toast-message">${message}</div>
                    </div>
                    <button class="toast-close" onclick="this.parentElement.remove()">
                        <i class="fas fa-times"></i>
                    </button>
                `;
                
                toastContainer.appendChild(toast);
                
                // Auto remove after duration
                setTimeout(() => {
                    if (toast.parentElement) {
                        toast.classList.add('removing');
                        setTimeout(() => {
                            if (toast.parentElement) {
                                toast.remove();
                            }
                        }, 300);
                    }
                }, duration);
            }

            // Form submission
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                // Basic validation
                const name = nameInput.value.trim();
                const quantity = document.getElementById('quantity').value;
                const expiry = expiryInput.value;
                const category = categoryInput.value;
                const condition = document.getElementById('condition').value;
                
                if (!name || !quantity || !expiry || !category || !condition) {
                    showToast('error', 'Validation Error', 'Please fill in all required fields');
                    return;
                }
                
                if (name.length < 3) {
                    showToast('error', 'Validation Error', 'Medicine name must be at least 3 characters long');
                    return;
                }
                
                // Save form data before submission
                saveFormData();
                
                // Show loading state
                submitBtn.style.display = 'none';
                loadingSpinner.style.display = 'block';
                
                try {
                    const formData = new FormData(form);
                    
                    const controller = new AbortController();
                    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout
                    
                    const response = await fetch('/donate', {
                        method: 'POST',
                        body: formData,
                        signal: controller.signal,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });
                    
                    clearTimeout(timeoutId);
                    
                    if (response.ok) {
                        const result = await response.json();
                        
                        if (result.success) {
                            // Show success toast
                            showToast('success', 'Donation Successful!', 'Your medicine has been donated successfully and is now available for requests.');
                            
                            // Clear saved form data
                            sessionStorage.removeItem('donateFormData');
                            
                            // Clear form data
                            form.reset();
                            
                            // Clear image previews
                            const previewContainer = document.querySelector('.preview-container');
                            if (previewContainer) {
                                previewContainer.innerHTML = '';
                            }
                            
                            // Show success modal
                            successModal.style.display = 'block';
                            document.body.style.overflow = 'hidden';
                        } else {
                            // Show error toast with form data preserved
                            showToast('error', 'Donation Failed', result.error || 'Failed to submit donation. Please try again.');
                            // Form data is already preserved in sessionStorage
                        }
                    } else {
                        // Handle HTTP error responses
                        const errorText = await response.text();
                        let errorMessage = 'Failed to submit donation. Please try again.';
                        
                        try {
                            const errorData = JSON.parse(errorText);
                            errorMessage = errorData.error || errorMessage;
                        } catch (e) {
                            // If not JSON, use the text as is
                            if (errorText.includes('ValidationError')) {
                                errorMessage = 'Please check your input and try again.';
                            }
                        }
                        
                        showToast('error', 'Donation Failed', errorMessage);
                        // Form data is already preserved in sessionStorage
                    }
                } catch (error) {
                    console.error('Form submission error:', error);
                    
                    let errorMessage = 'An error occurred. Please try again.';
                    if (error.name === 'AbortError') {
                        errorMessage = 'Request timed out. Please try again.';
                    }
                    
                    showToast('error', 'Connection Error', errorMessage);
                    // Form data is already preserved in sessionStorage
                } finally {
                    // Hide loading state
                    submitBtn.style.display = 'block';
                    loadingSpinner.style.display = 'none';
                }
            });
            
            // Close modal function
            window.closeSuccessModal = function() {
                successModal.style.display = 'none';
                document.body.style.overflow = 'auto';
            };

            // Close modal when clicking overlay
            document.querySelector('.modal-overlay').addEventListener('click', function() {
                closeSuccessModal();
            });

            // Close modal with Escape key
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape' && successModal.style.display === 'block') {
                    closeSuccessModal();
                }
            });
            

        });
    </script>