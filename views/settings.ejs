<link rel="stylesheet" href="/css/settings.css">
<div class="main-content">
    <!-- Settings Container -->
    <div class="settings-container">
        <div class="settings-card">
            <div class="settings-content">
                <h2 class="section-title">Security Settings</h2>
                
                <form class="password-form" id="passwordForm">
                    <div class="form-group">
                        <label class="form-label" for="currentPassword">
                            <i class="fas fa-lock"></i> Current Password
                        </label>
                        <div class="input-container">
                            <input type="password" id="currentPassword" class="form-input" placeholder="Enter your current password" required>
                            <button type="button" class="toggle-password" data-target="currentPassword">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label" for="newPassword">
                            <i class="fas fa-key"></i> New Password
                        </label>
                        <div class="input-container">
                            <input type="password" id="newPassword" class="form-input" placeholder="Create a new password" required>
                            <button type="button" class="toggle-password" data-target="newPassword">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                        <div class="password-strength">
                            <div class="strength-meter" id="strengthMeter"></div>
                        </div>
                        <div class="strength-text" id="strengthText">Password strength: None</div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label" for="confirmPassword">
                            <i class="fas fa-redo"></i> Confirm New Password
                        </label>
                        <div class="input-container">
                            <input type="password" id="confirmPassword" class="form-input" placeholder="Confirm your new password" required>
                            <button type="button" class="toggle-password" data-target="confirmPassword">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                    </div>
                    
                    <div class="requirements">
                        <div class="requirements-title">
                            <i class="fas fa-shield-alt"></i> Password Requirements
                        </div>
                        <ul class="requirements-list">
                            <li id="reqLength"><i class="fas fa-circle"></i> Minimum 8 characters</li>
                            <li id="reqUppercase"><i class="fas fa-circle"></i> At least one uppercase letter</li>
                            <li id="reqLowercase"><i class="fas fa-circle"></i> At least one lowercase letter</li>
                            <li id="reqNumber"><i class="fas fa-circle"></i> At least one number</li>
                            <li id="reqSpecial"><i class="fas fa-circle"></i> At least one special character</li>
                        </ul>
                    </div>
                    
                    <button type="submit" class="submit-button">
                        <i class="fas fa-save"></i> Change Password
                    </button>
                </form>
                
                <div class="success-message" id="successMessage">
                    <div class="success-icon">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <h3 class="success-title">Password Changed Successfully!</h3>
                    <p class="success-text">
                        Your password has been updated. For security reasons, you'll be logged out of all other sessions.
                        Please log in again with your new password.
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const passwordForm = document.getElementById('passwordForm');
            const currentPassword = document.getElementById('currentPassword');
            const newPassword = document.getElementById('newPassword');
            const confirmPassword = document.getElementById('confirmPassword');
            const strengthMeter = document.getElementById('strengthMeter');
            const strengthText = document.getElementById('strengthText');
            const toggleButtons = document.querySelectorAll('.toggle-password');
            const successMessage = document.getElementById('successMessage');
            
            // Toggle password visibility
            toggleButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const targetId = this.getAttribute('data-target');
                    const passwordInput = document.getElementById(targetId);
                    const icon = this.querySelector('i');
                    
                    if (passwordInput.type === 'password') {
                        passwordInput.type = 'text';
                        icon.classList.remove('fa-eye');
                        icon.classList.add('fa-eye-slash');
                    } else {
                        passwordInput.type = 'password';
                        icon.classList.remove('fa-eye-slash');
                        icon.classList.add('fa-eye');
                    }
                });
            });
            
            // Password strength checker
            newPassword.addEventListener('input', function() {
                const password = this.value;
                let strength = 0;
                
                // Reset requirement indicators
                document.querySelectorAll('.requirements-list li').forEach(li => {
                    li.classList.remove('valid');
                });
                
                // Check password length
                if (password.length >= 8) {
                    strength += 20;
                    document.getElementById('reqLength').classList.add('valid');
                }
                
                // Check uppercase letters
                if (/[A-Z]/.test(password)) {
                    strength += 20;
                    document.getElementById('reqUppercase').classList.add('valid');
                }
                
                // Check lowercase letters
                if (/[a-z]/.test(password)) {
                    strength += 20;
                    document.getElementById('reqLowercase').classList.add('valid');
                }
                
                // Check numbers
                if (/\d/.test(password)) {
                    strength += 20;
                    document.getElementById('reqNumber').classList.add('valid');
                }
                
                // Check special characters
                if (/[^A-Za-z0-9]/.test(password)) {
                    strength += 20;
                    document.getElementById('reqSpecial').classList.add('valid');
                }
                
                // Update strength meter
                strengthMeter.style.width = `${strength}%`;
                
                // Update strength text
                if (strength < 40) {
                    strengthMeter.style.background = 'var(--accent)';
                    strengthText.textContent = 'Password strength: Weak';
                    strengthText.style.color = 'var(--accent)';
                } else if (strength < 80) {
                    strengthMeter.style.background = '#ffc107';
                    strengthText.textContent = 'Password strength: Medium';
                    strengthText.style.color = '#ffc107';
                } else {
                    strengthMeter.style.background = 'var(--secondary)';
                    strengthText.textContent = 'Password strength: Strong';
                    strengthText.style.color = 'var(--secondary)';
                }
            });
            
            // Form submission
            passwordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                // Basic validation
                if (newPassword.value !== confirmPassword.value) {
                    showError('New passwords do not match. Please try again.');
                    return;
                }
                
                if (newPassword.value.length < 8) {
                    showError('Password must be at least 8 characters long.');
                    return;
                }
                
                // Show loading state
                const submitButton = this.querySelector('.submit-button');
                const originalText = submitButton.innerHTML;
                submitButton.disabled = true;
                submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Changing Password...';
                
                try {
                    const response = await fetch('/dashboard/settings/change-password', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            currentPassword: currentPassword.value,
                            newPassword: newPassword.value,
                            confirmPassword: confirmPassword.value
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        // Reset form
                        passwordForm.reset();
                        strengthMeter.style.width = '0';
                        strengthText.textContent = 'Password strength: None';
                        strengthText.style.color = 'var(--gray)';
                        
                        // Hide requirement validations
                        document.querySelectorAll('.requirements-list li').forEach(li => {
                            li.classList.remove('valid');
                        });
                        
                        // Show success message
                        successMessage.style.display = 'block';
                        
                        // Scroll to success message
                        successMessage.scrollIntoView({ behavior: 'smooth' });
                        
                        // Redirect to login page after 3 seconds
                        setTimeout(() => {
                            window.location.href = data.redirect;
                        }, 3000);
                    } else {
                        showError(data.error || 'Failed to change password');
                    }
                } catch (error) {
                    console.error('Change password error:', error);
                    showError('Network error. Please try again.');
                } finally {
                    // Reset button state
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalText;
                }
            });
            
            // Function to show error messages
            function showError(message) {
                // Create error notification
                const errorDiv = document.createElement('div');
                errorDiv.className = 'error-notification';
                errorDiv.innerHTML = `
                    <div class="error-content">
                        <i class="fas fa-exclamation-circle"></i>
                        <span>${message}</span>
                        <button class="error-close" onclick="this.parentElement.parentElement.remove()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `;
                
                // Add styles
                errorDiv.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: #dc3545;
                    color: white;
                    padding: 15px 20px;
                    border-radius: 8px;
                    box-shadow: 0 4px 20px rgba(220, 53, 69, 0.3);
                    z-index: 1000;
                    max-width: 400px;
                    animation: slideIn 0.3s ease;
                `;
                
                errorDiv.querySelector('.error-content').style.cssText = `
                    display: flex;
                    align-items: center;
                    gap: 10px;
                `;
                
                errorDiv.querySelector('.error-close').style.cssText = `
                    background: none;
                    border: none;
                    color: white;
                    cursor: pointer;
                    margin-left: auto;
                `;
                
                // Add to page
                document.body.appendChild(errorDiv);
                
                // Remove after 5 seconds
                setTimeout(() => {
                    if (errorDiv.parentElement) {
                        errorDiv.remove();
                    }
                }, 5000);
            }
            
            // Add CSS animation
            const style = document.createElement('style');
            style.textContent = `
                @keyframes slideIn {
                    from {
                        transform: translateX(100%);
                        opacity: 0;
                    }
                    to {
                        transform: translateX(0);
                        opacity: 1;
                    }
                }
            `;
            document.head.appendChild(style);
        });
    </script>