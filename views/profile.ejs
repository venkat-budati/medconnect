    <style>
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: white;
            border-radius: 8px;
            padding: 12px 16px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
            gap: 10px;
            z-index: 1000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            max-width: 380px;
            min-width: 280px;
            height: auto;
            min-height: 48px;
            max-height: 90px;
        }
        
        .notification.show {
            transform: translateX(0);
        }
        
        .notification-success {
            border-left: 4px solid #28a745;
            color: #155724;
        }
        
        .notification-error {
            border-left: 4px solid #dc3545;
            color: #721c24;
        }
        
        .notification i {
            font-size: 16px;
            flex-shrink: 0;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 18px;
            height: 18px;
            line-height: 1;
            vertical-align: middle;
            position: relative;
            top: 0;
            transform: translateY(0);
        }
        
        .notification .fas {
            display: inline-block;
            vertical-align: middle;
            line-height: 1;
        }
        
        .notification span {
            font-size: 14px;
            line-height: 1.3;
            flex: 1;
            display: inline-block;
            word-wrap: break-word;
            overflow-wrap: break-word;
            max-height: 55px;
            overflow: hidden;
            text-align: center;
            vertical-align: middle;
            position: relative;
            top: 0;
        }
        
        .notification-close {
            background: none;
            border: none;
            color: #666;
            font-size: 16px;
            cursor: pointer;
            padding: 0;
            width: 18px;
            height: 18px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.2s;
            flex-shrink: 0;
            margin-left: auto;
            line-height: 1;
            vertical-align: middle;
            position: relative;
            top: 0;
            transform: translateY(0);
        }
        
        .notification-close .fas {
            display: inline-block;
            vertical-align: middle;
            line-height: 1;
        }
        
        .notification-close:hover {
            background: rgba(0, 0, 0, 0.1);
            color: #333;
        }
        
        .save-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        /* Style for "Not provided" text */
        .info-value:contains("Not provided") {
            color: #6c757d !important;
            font-style: italic !important;
        }
    </style>
    
    <script>
        // Apply styling to "Not provided" text on page load
        document.addEventListener('DOMContentLoaded', function() {
            const infoValues = document.querySelectorAll('.info-value');
            infoValues.forEach(element => {
                if (element.textContent === 'Not provided') {
                    element.style.color = '#6c757d';
                    element.style.fontStyle = 'italic';
                }
            });
        });
    </script>
 <link rel="stylesheet" href="/css/profile.css">
 <div class="main-content">

    <!-- Profile Container -->
    <div class="profile-container">
        <!-- Profile Header -->
        <div class="profile-header">
            <div class="profile-header-content">
                <div class="profile-avatar"><%= user.initials %></div>
                <h2 class="profile-title"><%= user.fullName %></h2>
                <p class="profile-subtitle">MedConnect member since <%= new Date(user.createdAt).toLocaleDateString('en-US', { month: 'long', year: 'numeric' }) %>. Your contributions have helped <%= stats.peopleHelped %> people receive essential medicines.</p>
            </div>
        </div>
        
        <!-- Profile Completion Banner -->
        <% if (!isProfileComplete) { %>
        <div class="profile-completion-banner" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; margin: 20px 0; border-radius: 12px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);">
            <div style="display: flex; align-items: center; gap: 15px;">
                <div style="font-size: 24px;">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
                <div style="flex: 1;">
                    <h4 style="margin: 0 0 8px 0; font-size: 18px; font-weight: 600;">Complete Your Profile</h4>
                    <p style="margin: 0; font-size: 14px; opacity: 0.9;">
                        Please complete your profile information to access all features of MedConnect. 
                        This helps us provide better service and connect you with nearby medicines.
                    </p>
                </div>
                <div style="font-size: 14px; opacity: 0.8;">
                </div>
            </div>
        </div>
        <% } %>
        
        <!-- Profile Info -->
        <div class="profile-info">
            <button class="edit-button" id="editButton" onclick="console.log('Edit button clicked via onclick'); window.testEditMode && window.testEditMode();" style="cursor: pointer; z-index: 1000;">
                <i class="fas fa-edit"></i> Edit Profile
            </button>
            
            <div class="info-content">
                <h3 class="section-title">Personal Information</h3>
                
                <div class="info-grid">
                    <div class="info-group">
                        <span class="info-label"><i class="fas fa-user"></i> First Name</span>
                        <div class="info-value" id="firstName"><%= user.firstName || 'Not provided' %></div>
                        <input type="text" class="info-input" id="firstNameInput" value="<%= user.firstName || '' %>" style="display: none;">
                    </div>
                    
                    <div class="info-group">
                        <span class="info-label"><i class="fas fa-user"></i> Last Name</span>
                        <div class="info-value" id="lastName"><%= user.lastName || 'Not provided' %></div>
                        <input type="text" class="info-input" id="lastNameInput" value="<%= user.lastName || '' %>" style="display: none;">
                    </div>
                    
                    <div class="info-group">
                        <span class="info-label"><i class="fas fa-at"></i> Username</span>
                        <div class="info-value" id="username"><%= user.username || 'Not provided' %></div>
                        <input type="text" class="info-input" id="usernameInput" value="<%= user.username || '' %>" placeholder="Enter username (letters, numbers, underscores only)" style="display: none;">
                    </div>
                    
                    <div class="info-group">
                        <span class="info-label"><i class="fas fa-envelope"></i> Email</span>
                        <div class="info-value"><%= user.email %></div>
                    </div>
                    
                    <div class="info-group">
                        <span class="info-label"><i class="fas fa-phone"></i> Phone Number</span>
                        <div class="info-value" id="phone"><%= user.phone || 'Not provided' %></div>
                        <input type="text" class="info-input" id="phoneInput" value="<%= user.phone || '' %>" style="display: none;">
                    </div>
                    
                    <div class="info-group">
                        <span class="info-label"><i class="fas fa-map-marker-alt"></i> Address Line 1</span>
                        <div class="info-value" id="addressLine1"><%= user.addressLine1 || 'Not provided' %></div>
                        <div style="position: relative;">
                            <input type="text" class="info-input" id="addressLine1Input" value="<%= user.addressLine1 || '' %>" placeholder="Start typing your address..." style="display: none;">
                            <div style="position: absolute; right: 15px; top: 50%; transform: translateY(-50%); color: #6c757d; pointer-events: none; display: none;" id="autocompleteIcon">
                                <i class="fas fa-search"></i>
                            </div>
                            <div id="addressSuggestions" class="address-suggestions" style="display: none;"></div>
                        </div>
                        <div class="search-options" style="margin-top: 10px; display: none;">
                            <label style="font-size: 12px; color: #6c757d; display: flex; align-items: center; gap: 8px;">
                                <input type="checkbox" id="internationalSearch" style="margin: 0;">
                                Include international locations
                            </label>
                        </div>
                    </div>
                    

                    
                    <div class="info-group">
                        <span class="info-label"><i class="fas fa-globe"></i> Country</span>
                        <div class="info-value" id="country"><%= user.country || 'Not provided' %></div>
                        <input type="text" class="info-input" id="countryInput" value="<%= user.country || '' %>" style="display: none;" readonly>
                    </div>
                    
                    <div class="info-group">
                        <span class="info-label"><i class="fas fa-map"></i> State/Province</span>
                        <div class="info-value" id="state"><%= user.state || 'Not provided' %></div>
                        <input type="text" class="info-input" id="stateInput" value="<%= user.state || '' %>" style="display: none;" readonly>
                    </div>

                    <div class="info-group">
                        <span class="info-label"><i class="fas fa-globe"></i> District</span>
                        <div class="info-value" id="district"><%= user.district || 'Not provided' %></div>
                        <input type="text" class="info-input" id="districtInput" value="<%= user.district || '' %>" style="display: none;">
                    </div>

                    <div class="info-group">
                        <span class="info-label"><i class="fas fa-city"></i> City</span>
                        <div class="info-value" id="city"><%= user.city || 'Not provided' %></div>
                        <input type="text" class="info-input" id="cityInput" value="<%= user.city || '' %>" style="display: none;">
                    </div>
                    
                    <div class="info-group">
                        <span class="info-label"><i class="fas fa-mail-bulk"></i> Postal Code</span>
                        <div class="info-value" id="pincode"><%= user.pincode || 'Not provided' %></div>
                        <input type="text" class="info-input" id="pincodeInput" value="<%= user.pincode || '' %>" style="display: none;">
                    </div>
                    
                    <!-- Location Services Section -->
                    <div class="info-group location-services" style="grid-column: 1 / -1; margin-top: 20px; padding: 20px; background: #f8f9fa; border-radius: 8px; border: 2px dashed #dee2e6;">
                        <span class="info-label"><i class="fas fa-location-arrow"></i> Location Services</span>
                        <div class="location-content">
                            <p style="margin: 0 0 15px 0; color: #6c757d; font-size: 14px;">
                                Use your current location to automatically fill your address details. This helps us show you nearby medicines.
                            </p>
                            <div class="location-buttons">
                                <button type="button" class="btn btn-primary" id="shareLocationBtn" style="display: none;">
                                    <i class="fas fa-location-arrow"></i> Share My Location
                                </button>
                                <button type="button" class="btn btn-secondary" id="detectLocationBtn">
                                    <i class="fas fa-crosshairs"></i> Detect My Location
                                </button>
                                <div id="locationStatus" style="margin-top: 10px; font-size: 14px;"></div>
                            </div>
                            
                            <div style="margin-top: 20px; padding: 15px; background: rgba(42, 124, 199, 0.05); border-radius: 8px; border-left: 3px solid #2a7cc7;">
                                <h4 style="margin: 0 0 10px 0; color: #2a7cc7; font-size: 16px;">
                                    <i class="fas fa-lightbulb"></i> Pro Tips:
                                </h4>
                                <ul style="margin: 0; padding-left: 20px; color: #6c757d; font-size: 13px; line-height: 1.5;">
                                    <li><strong>Type to Search:</strong> Start typing in "Address Line 1" to see address suggestions</li>
                                    <li><strong>Villages & Cities:</strong> Search for cities, towns, villages, and rural areas</li>
                                    <li><strong>Keyboard Navigation:</strong> Use ↑↓ arrows to navigate suggestions, Enter to select</li>
                                    <li><strong>Auto-fill:</strong> Selecting a suggestion will fill all address fields automatically</li>
                                    <li><strong>Location Detection:</strong> Use "Detect My Location" for precise GPS-based address</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="button-group" id="saveButtons" style="display: none;">
                    <button class="save-button" id="saveButton">
                        <i class="fas fa-save"></i> Save Changes
                    </button>
                    <button class="cancel-button" id="cancelButton">
                        <i class="fas fa-times"></i> Cancel
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Stats Section -->
        <h3 class="section-title">Your MedConnect Stats</h3>
        <div class="stats-container">
            <div class="stat-card">
                <div class="stat-icon-card">
                    <i class="fas fa-pills"></i>
                </div>
                <div class="stat-details">
                    <div class="stat-number"><%= stats.medicinesDonated %></div>
                    <div class="stat-title">Medicines Donated</div>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon-card">
                    <i class="fas fa-hand-holding-medical"></i>
                </div>
                <div class="stat-details">
                    <div class="stat-number"><%= stats.medicinesReceived %></div>
                    <div class="stat-title">Medicines Received</div>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon-card">
                    <i class="fas fa-users"></i>
                </div>
                <div class="stat-details">
                    <div class="stat-number"><%= stats.peopleHelped %></div>
                    <div class="stat-title">People Helped</div>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon-card">
                    <i class="fas fa-star"></i>
                </div>
                <div class="stat-details">
                    <div class="stat-number"><%= stats.averageRating %></div>
                    <div class="stat-title">Average Rating</div>
                </div>
            </div>
        </div>
    </div>
</div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
        console.log('Profile page loaded');
        
            const editButton = document.getElementById('editButton');
            const saveButton = document.getElementById('saveButton');
            const cancelButton = document.getElementById('cancelButton');
            const saveButtons = document.getElementById('saveButtons');
        
        console.log('Edit button:', editButton);
        console.log('Save button:', saveButton);
        console.log('Cancel button:', cancelButton);
            
            // Editable fields
            const firstName = document.getElementById('firstName');
            const lastName = document.getElementById('lastName');
            const username = document.getElementById('username');
            const phone = document.getElementById('phone');
                     const addressLine1 = document.getElementById('addressLine1');
             const country = document.getElementById('country');
             const state = document.getElementById('state');
             const city = document.getElementById('city');
             const district = document.getElementById('district');
             const pincode = document.getElementById('pincode');
            
            // Input fields
            const firstNameInput = document.getElementById('firstNameInput');
            const lastNameInput = document.getElementById('lastNameInput');
            const usernameInput = document.getElementById('usernameInput');
            const phoneInput = document.getElementById('phoneInput');
                     const addressLine1Input = document.getElementById('addressLine1Input');
             const countryInput = document.getElementById('countryInput');
             const stateInput = document.getElementById('stateInput');
             const cityInput = document.getElementById('cityInput');
             const districtInput = document.getElementById('districtInput');
             const pincodeInput = document.getElementById('pincodeInput');
        
        console.log('DOM elements found:');
        console.log('firstName:', firstName);
        console.log('firstNameInput:', firstNameInput);
        console.log('saveButtons:', saveButtons);
        console.log('districtInput:', districtInput);
        
        // Store original values
        const originalValues = {
            firstName: firstName.textContent === 'Not provided' ? '' : firstName.textContent,
            lastName: lastName.textContent === 'Not provided' ? '' : lastName.textContent,
            username: username.textContent === 'Not provided' ? '' : username.textContent,
            phone: phone.textContent === 'Not provided' ? '' : phone.textContent,
            addressLine1: addressLine1.textContent === 'Not provided' ? '' : addressLine1.textContent,
            country: country.textContent === 'Not provided' ? '' : country.textContent,
            state: state.textContent === 'Not provided' ? '' : state.textContent,
            city: city.textContent === 'Not provided' ? '' : city.textContent,
            district: district.textContent === 'Not provided' ? '' : district.textContent,
            pincode: pincode.textContent === 'Not provided' ? '' : pincode.textContent
        };
        
        console.log('Original values:', originalValues);
            
            // Edit mode function
            function enableEditMode() {
            console.log('Enabling edit mode');
            
            try {
                // Hide static values
                if (firstName) firstName.style.display = 'none';
                if (lastName) lastName.style.display = 'none';
                if (username) username.style.display = 'none';
                if (phone) phone.style.display = 'none';
                if (addressLine1) addressLine1.style.display = 'none';
                if (country) country.style.display = 'none';
                if (state) state.style.display = 'none';
                if (city) city.style.display = 'none';
                if (district) district.style.display = 'none';
                if (pincode) pincode.style.display = 'none';
                
                console.log('Static values hidden');
                
                // Show input fields
                if (firstNameInput) firstNameInput.style.display = 'block';
                if (lastNameInput) lastNameInput.style.display = 'block';
                if (usernameInput) usernameInput.style.display = 'block';
                if (phoneInput) phoneInput.style.display = 'block';
                if (addressLine1Input) addressLine1Input.style.display = 'block';
                if (countryInput) countryInput.style.display = 'block';
                if (stateInput) stateInput.style.display = 'block';
                if (cityInput) cityInput.style.display = 'block';
                if (districtInput) districtInput.style.display = 'block';
                if (pincodeInput) pincodeInput.style.display = 'block';
                
                console.log('Input fields shown');
                
                // Show save buttons
                if (saveButtons) saveButtons.style.display = 'flex';
                
                // Hide edit button
                if (editButton) editButton.style.display = 'none';
                
                console.log('Edit mode enabled successfully');
                
                // Initialize address autocomplete after input is visible
                setTimeout(() => {
                    initializeAddressAutocomplete();
                }, 100);
                
                // Visual confirmation
                document.body.style.border = '3px solid green';
                setTimeout(() => {
                    document.body.style.border = '';
                }, 2000);
                
            } catch (error) {
                console.error('Error in enableEditMode:', error);
            }
            }
            
            // Cancel edit function
            function cancelEdit() {
            console.log('Canceling edit');
            
            try {
                // Show static values
                if (firstName) firstName.style.display = 'block';
                if (lastName) lastName.style.display = 'block';
                if (username) username.style.display = 'block';
                if (phone) phone.style.display = 'block';
                if (addressLine1) addressLine1.style.display = 'block';
                if (country) country.style.display = 'block';
                if (state) state.style.display = 'block';
                if (city) city.style.display = 'block';
                if (district) district.style.display = 'block';
                if (pincode) pincode.style.display = 'block';
                
                // Hide input fields
                if (firstNameInput) firstNameInput.style.display = 'none';
                if (lastNameInput) lastNameInput.style.display = 'none';
                if (usernameInput) usernameInput.style.display = 'none';
                if (phoneInput) phoneInput.style.display = 'none';
                if (addressLine1Input) addressLine1Input.style.display = 'none';
                if (countryInput) countryInput.style.display = 'none';
                if (stateInput) stateInput.style.display = 'none';
                if (cityInput) cityInput.style.display = 'none';
                if (districtInput) districtInput.style.display = 'none';
                if (pincodeInput) pincodeInput.style.display = 'none';
                
                // Hide save buttons
                if (saveButtons) saveButtons.style.display = 'none';
                
                // Show edit button
                if (editButton) editButton.style.display = 'flex';
                
                // Reset input values to original
                if (firstNameInput) firstNameInput.value = originalValues.firstName;
                if (lastNameInput) lastNameInput.value = originalValues.lastName;
                if (usernameInput) usernameInput.value = originalValues.username;
                if (phoneInput) phoneInput.value = originalValues.phone;
                if (addressLine1Input) addressLine1Input.value = originalValues.addressLine1;
                if (countryInput) countryInput.value = originalValues.country;
                if (stateInput) stateInput.value = originalValues.state;
                if (cityInput) cityInput.value = originalValues.city;
                if (districtInput) districtInput.value = originalValues.district;
                if (pincodeInput) pincodeInput.value = originalValues.pincode;
                
                console.log('Edit mode canceled successfully');
                
            } catch (error) {
                console.error('Error in cancelEdit:', error);
            }
        }
        
        // Save changes function
        async function saveChanges() {
            console.log('Saving changes');
            
            const formData = {
                firstName: firstNameInput.value.trim(),
                lastName: lastNameInput.value.trim(),
                username: usernameInput.value.trim(),
                phone: phoneInput.value.trim(),
                addressLine1: addressLine1Input.value.trim(),
                country: countryInput.value.trim(),
                state: stateInput.value.trim(),
                city: cityInput.value.trim(),
                district: districtInput.value.trim(),
                pincode: pincodeInput.value.trim()
            };
            
            console.log('Form data:', formData);
            
            // Client-side validation for all required fields
            const requiredFields = [
                { field: 'firstName', name: 'First Name' },
                { field: 'lastName', name: 'Last Name' },
                { field: 'username', name: 'Username' },
                { field: 'phone', name: 'Phone Number' },
                { field: 'addressLine1', name: 'Address' },
                { field: 'city', name: 'City' },
                { field: 'state', name: 'State' },
                { field: 'country', name: 'Country' },
                { field: 'district', name: 'District' },
                { field: 'pincode', name: 'Pincode' }
            ];
            
            // Check if any required field is empty
            for (const requiredField of requiredFields) {
                if (!formData[requiredField.field] || formData[requiredField.field].trim() === '') {
                    showNotification(`${requiredField.name} is required.`, 'error');
                    return;
                }
            }
            
            // Username validation - only alphanumeric and underscores
            const usernameRegex = /^[a-zA-Z0-9_]+$/;
            if (!usernameRegex.test(formData.username)) {
                showNotification('Username can only contain letters, numbers, and underscores.', 'error');
                return;
            }
            
            try {
                // Show loading state
                saveButton.disabled = true;
                saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
                
                const response = await fetch('/dashboard/profile/update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                });
                
                const data = await response.json();
                console.log('Response:', data);
                
                if (data.success) {
                    // Update static values
                    firstName.textContent = formData.firstName || 'Not provided';
                    lastName.textContent = formData.lastName || 'Not provided';
                    username.textContent = formData.username || 'Not provided';
                    phone.textContent = formData.phone || 'Not provided';
                    addressLine1.textContent = formData.addressLine1 || 'Not provided';
                    country.textContent = formData.country || 'Not provided';
                    state.textContent = formData.state || 'Not provided';
                    city.textContent = formData.city || 'Not provided';
                    district.textContent = formData.district || 'Not provided';
                    pincode.textContent = formData.pincode || 'Not provided';
                    
                    // Apply styling to "Not provided" text
                    [firstName, lastName, username, phone, addressLine1, country, state, city, district, pincode].forEach(element => {
                        if (element.textContent === 'Not provided') {
                            element.style.color = '#6c757d';
                            element.style.fontStyle = 'italic';
                        } else {
                            element.style.color = '';
                            element.style.fontStyle = '';
                        }
                    });
                    
                    // Update original values
                    Object.assign(originalValues, formData);
                    
                    // Update profile header
                    const profileTitle = document.querySelector('.profile-title');
                    const profileAvatar = document.querySelector('.profile-avatar');
                    
                    // Update name
                    profileTitle.textContent = `${formData.firstName} ${formData.lastName}`;
                    
                    // Update avatar initials
                    const first = formData.firstName ? formData.firstName.charAt(0) : '';
                    const last = formData.lastName ? formData.lastName.charAt(0) : '';
                    profileAvatar.textContent = (first + last).toUpperCase();
                    
                    // Check if profile is now complete
                    const isProfileComplete = checkProfileCompletion(formData);
                    
                    // Show success message
                    if (isProfileComplete) {
                        showNotification('Profile completed successfully! You can now access all features.', 'success');
                        // Remove the completion banner if it exists
                        const banner = document.querySelector('.profile-completion-banner');
                        if (banner) {
                            banner.style.display = 'none';
                        }
                    } else {
                        showNotification('Profile updated successfully!', 'success');
                    }
                
                // Exit edit mode
                cancelEdit();
                } else {
                    throw new Error(data.error || 'Failed to update profile');
                }
            } catch (error) {
                console.error('Save error:', error);
                showNotification('Failed to update profile. Please try again.', 'error');
            } finally {
                // Reset button state
                saveButton.disabled = false;
                saveButton.innerHTML = '<i class="fas fa-save"></i> Save Changes';
            }
        }
        
        // Check if profile is complete
        function checkProfileCompletion(formData) {
            const requiredFields = [
                formData.firstName,
                formData.lastName,
                formData.username,
                formData.phone,
                formData.addressLine1,
                formData.city,
                formData.state,
                formData.country,
                formData.district,
                formData.pincode
            ];
            
            return requiredFields.every(field => field && field.trim() !== '');
        }
        
        // Show notification function
        function showNotification(message, type = 'info') {
            console.log('Showing notification:', message, type);
            
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
                <span>${message}</span>
                <button class="notification-close" onclick="this.parentElement.remove()">
                    <i class="fas fa-times"></i>
                </button>
            `;
            
            // Add to page
            document.body.appendChild(notification);
            
            // Show notification
            setTimeout(() => notification.classList.add('show'), 100);
            
            // Remove after 5 seconds (increased from 3 seconds)
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.classList.remove('show');
                    setTimeout(() => notification.remove(), 300);
                }
            }, 5000);
        }
            
            // Event listeners
        if (editButton) {
            // Multiple event listeners to ensure it works
            editButton.addEventListener('click', function(e) {
                console.log('Edit button clicked!');
                e.preventDefault();
                e.stopPropagation();
                enableEditMode();
            });
            
            editButton.addEventListener('mousedown', function(e) {
                console.log('Edit button mousedown!');
                e.preventDefault();
                e.stopPropagation();
            });
            
            editButton.addEventListener('mouseup', function(e) {
                console.log('Edit button mouseup!');
                e.preventDefault();
                e.stopPropagation();
            });
            
            console.log('Edit button event listeners added');
        }
        
        if (saveButton) {
            saveButton.addEventListener('click', function() {
                console.log('Save button clicked!');
                saveChanges();
            });
            console.log('Save button event listener added');
        }
        
        if (cancelButton) {
            cancelButton.addEventListener('click', function() {
                console.log('Cancel button clicked!');
                cancelEdit();
            });
            console.log('Cancel button event listener added');
        }
        
        // Handle Enter key in input fields
                    const inputs = [firstNameInput, lastNameInput, phoneInput, addressLine1Input, countryInput, stateInput, cityInput, districtInput, pincodeInput];
        inputs.forEach(input => {
            if (input) {
                input.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        saveChanges();
                    }
                });
            }
        });
        
        // Make functions globally accessible for testing
        window.testEditMode = enableEditMode;
        window.testCancelEdit = cancelEdit;
        window.testSaveChanges = saveChanges;
        console.log('Test functions available: testEditMode(), testCancelEdit(), testSaveChanges()');
        
        // Test if button is clickable
        
        // Location Services Functionality
        const detectLocationBtn = document.getElementById('detectLocationBtn');
        const shareLocationBtn = document.getElementById('shareLocationBtn');
        const locationStatus = document.getElementById('locationStatus');
        
        // Detect location button functionality
        if (detectLocationBtn) {
            detectLocationBtn.addEventListener('click', function() {
                if (!navigator.geolocation) {
                    showLocationStatus('Geolocation is not supported by this browser.', 'error');
                    return;
                }
                
                showLocationStatus('Detecting your location...', 'info');
                detectLocationBtn.disabled = true;
                detectLocationBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Detecting...';
                
                navigator.geolocation.getCurrentPosition(
                    function(position) {
                        const { latitude, longitude } = position.coords;
                        showLocationStatus('Location detected! Fetching address details...', 'success');
                        
                        // Reverse geocode to get address
                        reverseGeocode(latitude, longitude);
                    },
                    function(error) {
                        let errorMessage = 'Unable to detect your location.';
                        switch(error.code) {
                            case error.PERMISSION_DENIED:
                                errorMessage = 'Location access denied. Please allow location access and try again.';
                                break;
                            case error.POSITION_UNAVAILABLE:
                                errorMessage = 'Location information unavailable.';
                                break;
                            case error.TIMEOUT:
                                errorMessage = 'Location request timed out.';
                                break;
                        }
                        showLocationStatus(errorMessage, 'error');
                        resetLocationButton();
                    },
                    {
                        enableHighAccuracy: true,
                        timeout: 10000,
                        maximumAge: 60000
                    }
                );
            });
        }
        
        // Share location button functionality
        if (shareLocationBtn) {
            shareLocationBtn.addEventListener('click', function() {
                if (!navigator.geolocation) {
                    showLocationStatus('Geolocation is not supported by this browser.', 'error');
                    return;
                }
                
                showLocationStatus('Sharing your location...', 'info');
                shareLocationBtn.disabled = true;
                shareLocationBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sharing...';
                
                navigator.geolocation.getCurrentPosition(
                    function(position) {
                        const { latitude, longitude } = position.coords;
                        showLocationStatus('Location shared successfully!', 'success');
                        
                        // Reverse geocode to get address
                        reverseGeocode(latitude, longitude);
                    },
                    function(error) {
                        showLocationStatus('Failed to share location. Please try again.', 'error');
                        resetLocationButton();
                    }
                );
            });
        }
        
        // Reverse geocoding function
        async function reverseGeocode(lat, lng) {
            try {
                const response = await fetch(`/dashboard/api/reverse-geocode?lat=${lat}&lng=${lng}`);
                const data = await response.json();
                
                if (data.results && data.results.length > 0) {
                    const addressComponents = data.results[0].address_components;
                    const formattedAddress = data.results[0].formatted_address;
                    
                    // Parse address components
                    const addressData = parseAddressComponents(addressComponents);
                    
                    // Auto-fill address fields if in edit mode
                    if (document.getElementById('addressLine1Input').style.display !== 'none') {
                        fillAddressFields(addressData, formattedAddress);
                        showLocationStatus('Address auto-filled successfully!', 'success');
                    } else {
                        // Store for when user enters edit mode
                        window.pendingAddressData = { addressData, formattedAddress };
                        showLocationStatus('Address detected! Click "Edit Profile" to fill in your details.', 'success');
                    }
                } else {
                    showLocationStatus('Could not find address for this location.', 'error');
                }
            } catch (error) {
                console.error('Reverse geocoding error:', error);
                showLocationStatus('Error fetching address details.', 'error');
            } finally {
                resetLocationButton();
            }
        }
        
        // Parse address components
        function parseAddressComponents(components) {
            console.log('Parsing address components:', components);
            const addressData = {};
            
            components.forEach(component => {
                const types = component.types;
                console.log('Component:', component.long_name, 'Types:', types);
                
                if (types.includes('street_number')) {
                    addressData.streetNumber = component.long_name;
                } else if (types.includes('route')) {
                    addressData.streetName = component.long_name;
                } else if (types.includes('locality')) {
                    addressData.city = component.long_name;
                } else if (types.includes('administrative_area_level_1')) {
                    addressData.state = component.long_name;
                } else if (types.includes('administrative_area_level_2')||types.includes('administrative_area_level_3')) {
                    if(!addressData.district)
                    addressData.district = component.long_name;
                }else if (types.includes('country')) {
                    addressData.country = component.long_name;
                } else if (types.includes('postal_code')) {
                    addressData.postalCode = component.long_name;
                } else if (types.includes('sublocality_level_1')) {
                    addressData.neighborhood = component.long_name;
                }
            });
            
            console.log('Parsed address data:', addressData);
            return addressData;
        }
        
        // Fill address fields
        function fillAddressFields(addressData, formattedAddress) {
    const addressLine1Input = document.getElementById('addressLine1Input');
    const cityInput = document.getElementById('cityInput');
    const districtInput = document.getElementById('districtInput');
    const stateInput = document.getElementById('stateInput');
    const countryInput = document.getElementById('countryInput');
    const pincodeInput = document.getElementById('pincodeInput');

    // --- NEW LOGIC TO BUILD A BETTER ADDRESS LINE 1 ---
    let constructedAddress = '';
    
    // 1. Prioritize street name if available
    if (addressData.streetName) {
        constructedAddress = addressData.streetName;
    
    // 2. Use neighborhood as the next best option
    } else if (addressData.neighborhood) {
        constructedAddress = addressData.neighborhood;

    // 3. As a last resort, use the formattedAddress but clean it up
    } else if (formattedAddress) {
        const parts = formattedAddress.split(',');
        // Check if the first part is a Plus Code (it contains a '+')
        if (parts[0].includes('+') && parts.length > 1) {
            // If it is, use the next part of the address instead (e.g., the city or town)
            constructedAddress = parts[1].trim();
        } else {
            // Otherwise, use the first part as is
            constructedAddress = parts[0].trim();
        }
    }
    
    addressLine1Input.value = constructedAddress;
    
    // --- Fill other fields as before ---
    if (cityInput) cityInput.value = addressData.city || '';
    if (districtInput) districtInput.value = addressData.district || '';
    if (stateInput) stateInput.value = addressData.state || '';
    if (countryInput) countryInput.value = addressData.country || '';
    if (pincodeInput) pincodeInput.value = addressData.postalCode || '';
}
        
        // Show location status
        function showLocationStatus(message, type) {
            if (locationStatus) {
                locationStatus.innerHTML = `<span class="status-${type}">${message}</span>`;
                locationStatus.style.display = 'block';
            }
        }
        
        // Reset location button
        function resetLocationButton() {
            if (detectLocationBtn) {
                detectLocationBtn.disabled = false;
                detectLocationBtn.innerHTML = '<i class="fas fa-crosshairs"></i> Detect My Location';
            }
            if (shareLocationBtn) {
                shareLocationBtn.disabled = false;
                shareLocationBtn.innerHTML = '<i class="fas fa-location-arrow"></i> Share My Location';
            }
        }
        
        // Enhanced enableEditMode to handle pending address data
        const originalEnableEditMode = enableEditMode;
        enableEditMode = function() {
            originalEnableEditMode();
            
            // Check if there's pending address data
            if (window.pendingAddressData) {
                fillAddressFields(window.pendingAddressData.addressData, window.pendingAddressData.formattedAddress);
                showLocationStatus('Address auto-filled! Please review and save.', 'success');
                delete window.pendingAddressData;
            }
            
            // Initialize address autocomplete
            initializeAddressAutocomplete();
        };
        
        // Address Autocomplete Functionality
        let addressAutocompleteTimeout;
        let selectedSuggestionIndex = -1;
        
        function initializeAddressAutocomplete() {
            const addressInput = document.getElementById('addressLine1Input');
            const suggestionsContainer = document.getElementById('addressSuggestions');
            const autocompleteIcon = document.getElementById('autocompleteIcon');
            
            if (!addressInput || !suggestionsContainer) {
                console.log('Address autocomplete elements not found');
                return;
            }
            
            console.log('Initializing address autocomplete');
            
            // Show autocomplete icon
            if (autocompleteIcon) {
                autocompleteIcon.style.display = 'block';
            }
            
            // Add event listeners for address input
            addressInput.addEventListener('input', handleAddressInput);
            addressInput.addEventListener('keydown', handleAddressKeydown);
            addressInput.addEventListener('focus', handleAddressFocus);
            addressInput.addEventListener('blur', handleAddressBlur);
            
            // Close suggestions when clicking outside
            document.addEventListener('click', function(e) {
                if (!addressInput.contains(e.target) && !suggestionsContainer.contains(e.target)) {
                    hideSuggestions();
                }
            });
            
            // Add event listener for international search checkbox
            const internationalSearch = document.getElementById('internationalSearch');
            if (internationalSearch) {
                internationalSearch.addEventListener('change', function() {
                    const query = addressInput.value.trim();
                    if (query.length >= 3) {
                        searchAddresses(query);
                    }
                });
            }
            

        }
        
        function handleAddressInput(e) {
            const query = e.target.value.trim();
            console.log('Address input:', query);
            
            // Clear previous timeout
            if (addressAutocompleteTimeout) {
                clearTimeout(addressAutocompleteTimeout);
            }
            
            // Hide suggestions if query is too short
            if (query.length < 3) {
                console.log('Query too short, hiding suggestions');
                hideSuggestions();
                return;
            }
            
            console.log('Query length:', query.length, 'showing suggestions');
            
            // Show typing indicator
            const suggestionsContainer = document.getElementById('addressSuggestions');
            if (suggestionsContainer) {
                suggestionsContainer.innerHTML = `
                    <div class="address-suggestion-loading">
                        <i class="fas fa-spinner"></i> Searching for addresses...
                    </div>
                `;
                showSuggestions();
            }
            
            // Debounce the API call
            addressAutocompleteTimeout = setTimeout(() => {
                console.log('Calling searchAddresses with:', query);
                searchAddresses(query);
            }, 300);
        }
        
        function handleAddressKeydown(e) {
            const suggestionsContainer = document.getElementById('addressSuggestions');
            const suggestions = suggestionsContainer.querySelectorAll('.address-suggestion-item');
            
            switch(e.key) {
                case 'ArrowDown':
                    e.preventDefault();
                    selectedSuggestionIndex = Math.min(selectedSuggestionIndex + 1, suggestions.length - 1);
                    updateSelectedSuggestion(suggestions);
                    break;
                    
                case 'ArrowUp':
                    e.preventDefault();
                    selectedSuggestionIndex = Math.max(selectedSuggestionIndex - 1, -1);
                    updateSelectedSuggestion(suggestions);
                    break;
                    
                case 'Enter':
                    e.preventDefault();
                    if (selectedSuggestionIndex >= 0 && suggestions[selectedSuggestionIndex]) {
                        selectAddressSuggestion(suggestions[selectedSuggestionIndex]);
                    }
                    break;
                    
                case 'Escape':
                    hideSuggestions();
                    break;
            }
        }
        
        function handleAddressFocus() {
            const query = document.getElementById('addressLine1Input').value.trim();
            if (query.length >= 3) {
                searchAddresses(query);
            }
        }
        
        function handleAddressBlur() {
            // Delay hiding to allow for clicks on suggestions
            setTimeout(() => {
                hideSuggestions();
            }, 5000);
        }
        
        async function searchAddresses(query) {
            console.log('Searching addresses for:', query);
            const suggestionsContainer = document.getElementById('addressSuggestions');
            
            if (!suggestionsContainer) {
                console.error('Suggestions container not found');
                return;
            }
            
            // Show loading state
            suggestionsContainer.innerHTML = `
                <div class="address-suggestion-loading">
                    <i class="fas fa-spinner"></i> Searching for addresses...
                </div>
            `;
            showSuggestions();
            
            try {
                // Add international parameter if checkbox is checked
                const internationalSearch = document.getElementById('internationalSearch');
                const internationalParam = internationalSearch && internationalSearch.checked ? '&international=true' : '';
                const url = `/dashboard/api/address-autocomplete?input=${encodeURIComponent(query)}${internationalParam}`;
                console.log('Fetching from:', url);
                
                const response = await fetch(url);
                const data = await response.json();
                console.log('API response:', data);
                
                if (data.status === 'OK' && data.predictions && data.predictions.length > 0) {
                    displayAddressSuggestions(data.predictions);
                } else {
                    suggestionsContainer.innerHTML = `
                        <div class="address-suggestion-item">
                            <i class="fas fa-info-circle address-suggestion-icon"></i>
                            <div class="address-suggestion-text">
                                <div class="address-suggestion-main">No addresses found</div>
                                <div class="address-suggestion-secondary">Try a different search term or enable international search</div>
                            </div>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Address search error:', error);
                suggestionsContainer.innerHTML = `
                    <div class="address-suggestion-item">
                        <i class="fas fa-exclamation-triangle address-suggestion-icon"></i>
                        <div class="address-suggestion-text">
                            <div class="address-suggestion-main">Search error</div>
                            <div class="address-suggestion-secondary">Please try again</div>
                        </div>
                    </div>
                `;
            }
        }
        
        function displayAddressSuggestions(predictions) {
            console.log('Displaying suggestions:', predictions.length);
            const suggestionsContainer = document.getElementById('addressSuggestions');
            
            if (!suggestionsContainer) {
                console.error('Suggestions container not found');
                return;
            }
            
            console.log('Suggestions container found:', suggestionsContainer);
            console.log('Container display style:', suggestionsContainer.style.display);
            
            suggestionsContainer.innerHTML = predictions.map((prediction, index) => {
                const mainText = prediction.structured_formatting?.main_text || prediction.description;
                const secondaryText = prediction.structured_formatting?.secondary_text || '';
                
                // Determine icon based on types
                let icon = 'fas fa-map-marker-alt';
                if (prediction.types && prediction.types.length > 0) {
                    if (prediction.types.includes('locality') || prediction.types.includes('administrative_area_level_1')) {
                        icon = 'fas fa-city'; // City/State
                    } else if (prediction.types.includes('political')) {
                        icon = 'fas fa-flag'; // Administrative area
                    } else if (prediction.types.includes('sublocality') || prediction.types.includes('sublocality_level_1')) {
                        icon = 'fas fa-home'; // Village/Neighborhood
                    } else if (prediction.types.includes('route')) {
                        icon = 'fas fa-road'; // Street
                    } else if (prediction.types.includes('establishment')) {
                        icon = 'fas fa-building'; // Landmark/Business
                    } else if (prediction.types.includes('premise')) {
                        icon = 'fas fa-building'; // Specific location
                    } else if (prediction.types.includes('intersection')) {
                        icon = 'fas fa-crosshairs'; // Intersection
                    }
                }
                
                return `
                    <div class="address-suggestion-item" data-place-id="${prediction.place_id}" data-index="${index}" onclick="console.log('Direct click on suggestion:', '${mainText}')">
                        <i class="${icon} address-suggestion-icon"></i>
                        <div class="address-suggestion-text">
                            <div class="address-suggestion-main">${mainText}</div>
                            ${secondaryText ? `<div class="address-suggestion-secondary">${secondaryText}</div>` : ''}
                        </div>
                    </div>
                `;
            }).join('');
            
            console.log('Generated HTML length:', suggestionsContainer.innerHTML.length);
            console.log('First 200 chars of HTML:', suggestionsContainer.innerHTML.substring(0, 200));
            
            // Use event delegation for click handling
            console.log('Setting up event delegation for suggestions');
            suggestionsContainer.addEventListener('click', (e) => {
                console.log('Click event on suggestions container:', e.target);
                const suggestionItem = e.target.closest('.address-suggestion-item');
                if (suggestionItem) {
                    console.log('Suggestion item clicked via delegation!', suggestionItem);
                    selectAddressSuggestion(suggestionItem);
                } else {
                    console.log('Click was not on a suggestion item');
                }
            });
            
            showSuggestions();
            selectedSuggestionIndex = -1;
        }
        
        function selectAddressSuggestion(suggestionItem) {
            const placeId = suggestionItem.dataset.placeId;
            console.log('Selected place ID:', placeId);
            
            // Get place details
            getPlaceDetails(placeId, (addressData) => {
                if (addressData) {
                    console.log('Address data received:', addressData);
                    fillAddressFieldsFromAutocomplete(addressData);
                    hideSuggestions();
                    showLocationStatus('Address auto-filled successfully!', 'success');
                } else {
                    console.error('Failed to get address details');
                    showLocationStatus('Failed to get address details', 'error');
                }
            });
        }
        
        async function getPlaceDetails(placeId, callback) {
            try {
                const response = await fetch(`/dashboard/api/place-details?place_id=${placeId}`);
                const data = await response.json();
                if (data.result) {
                    const addressData = parseAddressComponents(data.result.address_components);
                    addressData.formattedAddress = data.result.formatted_address;
                    console.log(data.result.address_components);
                    callback(addressData);
                } else {
                    callback(null);
                }
            } catch (error) {
                console.error('Place details error:', error);
                callback(null);
            }
        }
        
                 function fillAddressFieldsFromAutocomplete(addressData) {
             console.log('Filling address fields with:', addressData);
             const addressLine1Input = document.getElementById('addressLine1Input');
             const cityInput = document.getElementById('cityInput');
             const stateInput = document.getElementById('stateInput');
                          const districtInput = document.getElementById('districtInput');
             const countryInput = document.getElementById('countryInput');
             const pincodeInput = document.getElementById('pincodeInput');
            
                         console.log('Input elements found:');
             console.log('addressLine1Input:', addressLine1Input);
             console.log('cityInput:', cityInput);
             console.log('stateInput:', stateInput);
                          console.log('districtInput:', districtInput);
             console.log('countryInput:', countryInput);
             console.log('pincodeInput:', pincodeInput);

            // Check if we're in edit mode
            if (addressLine1Input.style.display === 'none') {
                console.log('Not in edit mode, enabling edit mode first');
                enableEditMode();
                // Wait a bit for edit mode to be enabled
                setTimeout(() => {
                    fillAddressFieldsFromAutocomplete(addressData);
                }, 100);
                return;
            }
            
            console.log('In edit mode, filling fields');
            
            // Fill address line 1 with street address
            if (addressData.streetNumber && addressData.streetName) {
                addressLine1Input.value = `${addressData.streetNumber} ${addressData.streetName}`;
                console.log('Set address line 1 to:', addressLine1Input.value);
            } else if (addressData.formattedAddress) {
                // Extract first line from formatted address
                const lines = addressData.formattedAddress.split(',');
                addressLine1Input.value = lines[0] || '';
                console.log('Set address line 1 to:', addressLine1Input.value);
            }
            
            // Fill other fields
            if (addressData.city && cityInput) {
                cityInput.value = addressData.city;
                console.log('Set city to:', cityInput.value);
            }
            if (addressData.district && districtInput) {
                districtInput.value = addressData.district;
                console.log('Set district to:', districtInput.value);
            }
            if (addressData.state && stateInput) {
                stateInput.value = addressData.state;
                console.log('Set state to:', stateInput.value);
            }
            if (addressData.country && countryInput) {
                countryInput.value = addressData.country;
                console.log('Set country to:', countryInput.value);
            }
            if (addressData.postalCode && pincodeInput) {
                pincodeInput.value = addressData.postalCode;
                console.log('Set postal code to:', pincodeInput.value);
            }
            
            console.log('Address fields filled successfully');
        }
        
        function updateSelectedSuggestion(suggestions) {
            suggestions.forEach((suggestion, index) => {
                if (index === selectedSuggestionIndex) {
                    suggestion.classList.add('selected');
                    suggestion.scrollIntoView({ block: 'nearest' });
                } else {
                    suggestion.classList.remove('selected');
                }
            });
        }
        
        function showSuggestions() {
            console.log('Showing suggestions');
            const suggestionsContainer = document.getElementById('addressSuggestions');
            const searchOptions = document.querySelector('.search-options');
            
            if (suggestionsContainer) {
                suggestionsContainer.style.display = 'block';
                suggestionsContainer.style.border = '2px solid red'; // Temporary visual test
                console.log('Suggestions container displayed');
                
                // Add a test click handler to the container itself
                suggestionsContainer.onclick = function(e) {
                    console.log('Container clicked:', e.target);
                };
                
                // Also add a mousedown handler to test
                suggestionsContainer.onmousedown = function(e) {
                    console.log('Container mousedown:', e.target);
                };
                
                // Add a subtle highlight to the input field
                const addressInput = document.getElementById('addressLine1Input');
                if (addressInput) {
                    addressInput.style.borderColor = '#2a7cc7';
                    addressInput.style.boxShadow = '0 0 0 3px rgba(42, 124, 199, 0.1)';
                }
            } else {
                console.error('Suggestions container not found in showSuggestions');
            }
            
            // Show search options
            if (searchOptions) {
                searchOptions.style.display = 'block';
            }
        }
        
        function hideSuggestions() {
            const suggestionsContainer = document.getElementById('addressSuggestions');
            const searchOptions = document.querySelector('.search-options');
            
            if (suggestionsContainer) {
                suggestionsContainer.style.display = 'none';
                selectedSuggestionIndex = -1;
                // Remove highlight from input field
                const addressInput = document.getElementById('addressLine1Input');
                if (addressInput) {
                    addressInput.style.borderColor = '';
                    addressInput.style.boxShadow = '';
                }
            }
            
            // Hide search options
            if (searchOptions) {
                searchOptions.style.display = 'none';
            }
        }
        
        }); // Close DOMContentLoaded event listener
    </script>


