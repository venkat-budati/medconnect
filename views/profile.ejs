<style>
    .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        background: white;
        border-radius: 8px;
        padding: 15px 20px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        display: flex;
        align-items: center;
        gap: 10px;
        z-index: 1000;
        transform: translateX(100%);
        transition: transform 0.3s ease;
        max-width: 300px;
    }
    
    .notification.show {
        transform: translateX(0);
    }
    
    .notification-success {
        border-left: 4px solid #28a745;
        color: #155724;
    }
    
    .notification-error {
        border-left: 4px solid #dc3545;
        color: #721c24;
    }
    
    .notification i {
        font-size: 18px;
    }
    
    .save-button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }
</style>
<link rel="stylesheet" href="/css/profile.css">
<div class="main-content">

    <!-- Profile Container -->
    <div class="profile-container">
        <!-- Profile Header -->
        <div class="profile-header">
            <div class="profile-header-content">
                <div class="profile-avatar"><%= user.initials %></div>
                <h2 class="profile-title"><%= user.fullName %></h2>
                <p class="profile-subtitle">MedConnect member since <%= new Date(user.createdAt).toLocaleDateString('en-US', { month: 'long', year: 'numeric' }) %>. Your contributions have helped <%= stats.peopleHelped %> people receive essential medicines.</p>
            </div>
        </div>
        
        <!-- Profile Info -->
        <div class="profile-info">
            <button class="edit-button" id="editButton" onclick="console.log('Edit button clicked via onclick'); window.testEditMode && window.testEditMode();" style="cursor: pointer; z-index: 1000;">
                <i class="fas fa-edit"></i> Edit Profile
            </button>
            
            <div class="info-content">
                <h3 class="section-title">Personal Information</h3>
                
                <div class="info-grid">
                    <div class="info-group">
                        <span class="info-label"><i class="fas fa-user"></i> First Name</span>
                        <div class="info-value" id="firstName"><%= user.firstName || '' %></div>
                        <input type="text" class="info-input" id="firstNameInput" value="<%= user.firstName || '' %>" style="display: none;">
                    </div>
                    
                    <div class="info-group">
                        <span class="info-label"><i class="fas fa-user"></i> Last Name</span>
                        <div class="info-value" id="lastName"><%= user.lastName || '' %></div>
                        <input type="text" class="info-input" id="lastNameInput" value="<%= user.lastName || '' %>" style="display: none;">
                    </div>
                    
                    <div class="info-group">
                        <span class="info-label"><i class="fas fa-at"></i> Username</span>
                        <div class="info-value"><%= user.username || '' %></div>
                    </div>
                    
                    <div class="info-group">
                        <span class="info-label"><i class="fas fa-envelope"></i> Email</span>
                        <div class="info-value"><%= user.email %></div>
                    </div>
                    
                    <div class="info-group">
                        <span class="info-label"><i class="fas fa-mobile-alt"></i> Mobile Number</span>
                        <div class="info-value" id="mobile"><%= user.mobile || '' %></div>
                        <input type="text" class="info-input" id="mobileInput" value="<%= user.mobile || '' %>" style="display: none;">
                    </div>
                    
                    <div class="info-group">
                        <span class="info-label"><i class="fas fa-map-marker-alt"></i> Address Line 1</span>
                        <div class="info-value" id="addressLine1"><%= user.addressLine1 || '' %></div>
                        <input type="text" class="info-input" id="addressLine1Input" value="<%= user.addressLine1 || '' %>" style="display: none;">
                    </div>
                    
                    <div class="info-group">
                        <span class="info-label"><i class="fas fa-globe"></i> Country</span>
                        <div class="info-value" id="country"><%= user.country || '' %></div>
                        <input type="text" class="info-input" id="countryInput" value="<%= user.country || '' %>" style="display: none;">
                    </div>
                    
                    <div class="info-group">
                        <span class="info-label"><i class="fas fa-map"></i> State</span>
                        <div class="info-value" id="state"><%= user.state || '' %></div>
                        <input type="text" class="info-input" id="stateInput" value="<%= user.state || '' %>" style="display: none;">
                    </div>
                    
                    <div class="info-group">
                        <span class="info-label"><i class="fas fa-city"></i> City</span>
                        <div class="info-value" id="city"><%= user.city || '' %></div>
                        <input type="text" class="info-input" id="cityInput" value="<%= user.city || '' %>" style="display: none;">
                    </div>
                    
                    <div class="info-group">
                        <span class="info-label"><i class="fas fa-mail-bulk"></i> Pincode</span>
                        <div class="info-value" id="pincode"><%= user.pincode || '' %></div>
                        <input type="text" class="info-input" id="pincodeInput" value="<%= user.pincode || '' %>" style="display: none;">
                    </div>
                </div>
                
                <div class="button-group" id="saveButtons" style="display: none;">
                    <button class="save-button" id="saveButton">
                        <i class="fas fa-save"></i> Save Changes
                    </button>
                    <button class="cancel-button" id="cancelButton">
                        <i class="fas fa-times"></i> Cancel
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Stats Section -->
        <h3 class="section-title">Your MedConnect Stats</h3>
        <div class="stats-container">
            <div class="stat-card">
                <div class="stat-icon-card">
                    <i class="fas fa-pills"></i>
                </div>
                <div class="stat-details">
                    <div class="stat-number"><%= stats.medicinesDonated %></div>
                    <div class="stat-title">Medicines Donated</div>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon-card">
                    <i class="fas fa-hand-holding-medical"></i>
                </div>
                <div class="stat-details">
                    <div class="stat-number"><%= stats.medicinesReceived %></div>
                    <div class="stat-title">Medicines Received</div>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon-card">
                    <i class="fas fa-users"></i>
                </div>
                <div class="stat-details">
                    <div class="stat-number"><%= stats.peopleHelped %></div>
                    <div class="stat-title">People Helped</div>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon-card">
                    <i class="fas fa-star"></i>
                </div>
                <div class="stat-details">
                    <div class="stat-number"><%= stats.averageRating %></div>
                    <div class="stat-title">Average Rating</div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Profile page loaded');
        
        const editButton = document.getElementById('editButton');
        const saveButton = document.getElementById('saveButton');
        const cancelButton = document.getElementById('cancelButton');
        const saveButtons = document.getElementById('saveButtons');
        
        console.log('Edit button:', editButton);
        console.log('Save button:', saveButton);
        console.log('Cancel button:', cancelButton);
        
        // Editable fields
        const firstName = document.getElementById('firstName');
        const lastName = document.getElementById('lastName');
        const mobile = document.getElementById('mobile');
        const addressLine1 = document.getElementById('addressLine1');
        const country = document.getElementById('country');
        const state = document.getElementById('state');
        const city = document.getElementById('city');
        const pincode = document.getElementById('pincode');
        
        // Input fields
        const firstNameInput = document.getElementById('firstNameInput');
        const lastNameInput = document.getElementById('lastNameInput');
        const mobileInput = document.getElementById('mobileInput');
        const addressLine1Input = document.getElementById('addressLine1Input');
        const countryInput = document.getElementById('countryInput');
        const stateInput = document.getElementById('stateInput');
        const cityInput = document.getElementById('cityInput');
        const pincodeInput = document.getElementById('pincodeInput');
        
        console.log('DOM elements found:');
        console.log('firstName:', firstName);
        console.log('firstNameInput:', firstNameInput);
        console.log('saveButtons:', saveButtons);
        
        // Store original values
        const originalValues = {
            firstName: firstName.textContent,
            lastName: lastName.textContent,
            mobile: mobile.textContent,
            addressLine1: addressLine1.textContent,
            country: country.textContent,
            state: state.textContent,
            city: city.textContent,
            pincode: pincode.textContent
        };
        
        console.log('Original values:', originalValues);
        
        // Edit mode function
        function enableEditMode() {
            console.log('Enabling edit mode');
            
            try {
                // Hide static values
                if (firstName) firstName.style.display = 'none';
                if (lastName) lastName.style.display = 'none';
                if (mobile) mobile.style.display = 'none';
                if (addressLine1) addressLine1.style.display = 'none';
                if (country) country.style.display = 'none';
                if (state) state.style.display = 'none';
                if (city) city.style.display = 'none';
                if (pincode) pincode.style.display = 'none';
                
                console.log('Static values hidden');
                
                // Show input fields
                if (firstNameInput) firstNameInput.style.display = 'block';
                if (lastNameInput) lastNameInput.style.display = 'block';
                if (mobileInput) mobileInput.style.display = 'block';
                if (addressLine1Input) addressLine1Input.style.display = 'block';
                if (countryInput) countryInput.style.display = 'block';
                if (stateInput) stateInput.style.display = 'block';
                if (cityInput) cityInput.style.display = 'block';
                if (pincodeInput) pincodeInput.style.display = 'block';
                
                console.log('Input fields shown');
                
                // Show save buttons
                if (saveButtons) saveButtons.style.display = 'flex';
                
                // Hide edit button
                if (editButton) editButton.style.display = 'none';
                
                console.log('Edit mode enabled successfully');
                
                // Visual confirmation
                document.body.style.border = '3px solid green';
                setTimeout(() => {
                    document.body.style.border = '';
                }, 2000);
                
            } catch (error) {
                console.error('Error in enableEditMode:', error);
            }
        }
        
        // Cancel edit function
        function cancelEdit() {
            console.log('Canceling edit');
            
            try {
                // Show static values
                if (firstName) firstName.style.display = 'block';
                if (lastName) lastName.style.display = 'block';
                if (mobile) mobile.style.display = 'block';
                if (addressLine1) addressLine1.style.display = 'block';
                if (country) country.style.display = 'block';
                if (state) state.style.display = 'block';
                if (city) city.style.display = 'block';
                if (pincode) pincode.style.display = 'block';
                
                // Hide input fields
                if (firstNameInput) firstNameInput.style.display = 'none';
                if (lastNameInput) lastNameInput.style.display = 'none';
                if (mobileInput) mobileInput.style.display = 'none';
                if (addressLine1Input) addressLine1Input.style.display = 'none';
                if (countryInput) countryInput.style.display = 'none';
                if (stateInput) stateInput.style.display = 'none';
                if (cityInput) cityInput.style.display = 'none';
                if (pincodeInput) pincodeInput.style.display = 'none';
                
                // Hide save buttons
                if (saveButtons) saveButtons.style.display = 'none';
                
                // Show edit button
                if (editButton) editButton.style.display = 'flex';
                
                // Reset input values to original
                if (firstNameInput) firstNameInput.value = originalValues.firstName;
                if (lastNameInput) lastNameInput.value = originalValues.lastName;
                if (mobileInput) mobileInput.value = originalValues.mobile;
                if (addressLine1Input) addressLine1Input.value = originalValues.addressLine1;
                if (countryInput) countryInput.value = originalValues.country;
                if (stateInput) stateInput.value = originalValues.state;
                if (cityInput) cityInput.value = originalValues.city;
                if (pincodeInput) pincodeInput.value = originalValues.pincode;
                
                console.log('Edit mode canceled successfully');
                
            } catch (error) {
                console.error('Error in cancelEdit:', error);
            }
        }
        
        // Save changes function
        async function saveChanges() {
            console.log('Saving changes');
            
            const formData = {
                firstName: firstNameInput.value.trim(),
                lastName: lastNameInput.value.trim(),
                mobile: mobileInput.value.trim(),
                addressLine1: addressLine1Input.value.trim(),
                country: countryInput.value.trim(),
                state: stateInput.value.trim(),
                city: cityInput.value.trim(),
                pincode: pincodeInput.value.trim()
            };
            
            console.log('Form data:', formData);
            
            // Client-side validation
            if (!formData.firstName || !formData.lastName) {
                showNotification('First name and last name are required.', 'error');
                return;
            }
            
            try {
                // Show loading state
                saveButton.disabled = true;
                saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
                
                const response = await fetch('/dashboard/profile/update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                });
                
                const data = await response.json();
                console.log('Response:', data);
                
                if (data.success) {
                    // Update static values
                    firstName.textContent = formData.firstName;
                    lastName.textContent = formData.lastName;
                    mobile.textContent = formData.mobile;
                    addressLine1.textContent = formData.addressLine1;
                    country.textContent = formData.country;
                    state.textContent = formData.state;
                    city.textContent = formData.city;
                    pincode.textContent = formData.pincode;
                    
                    // Update original values
                    Object.assign(originalValues, formData);
                    
                    // Update profile header
                    const profileTitle = document.querySelector('.profile-title');
                    const profileAvatar = document.querySelector('.profile-avatar');
                    
                    // Update name
                    profileTitle.textContent = `${formData.firstName} ${formData.lastName}`;
                    
                    // Update avatar initials
                    const first = formData.firstName ? formData.firstName.charAt(0) : '';
                    const last = formData.lastName ? formData.lastName.charAt(0) : '';
                    profileAvatar.textContent = (first + last).toUpperCase();
                    
                    // Show success message
                    showNotification('Profile updated successfully!', 'success');
                    
                    // Exit edit mode
                    cancelEdit();
                } else {
                    throw new Error(data.error || 'Failed to update profile');
                }
            } catch (error) {
                console.error('Save error:', error);
                showNotification('Failed to update profile. Please try again.', 'error');
            } finally {
                // Reset button state
                saveButton.disabled = false;
                saveButton.innerHTML = '<i class="fas fa-save"></i> Save Changes';
            }
        }
        
        // Show notification function
        function showNotification(message, type = 'info') {
            console.log('Showing notification:', message, type);
            
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
                <span>${message}</span>
            `;
            
            // Add to page
            document.body.appendChild(notification);
            
            // Show notification
            setTimeout(() => notification.classList.add('show'), 100);
            
            // Remove after 3 seconds
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }
        
        // Event listeners
        if (editButton) {
            // Multiple event listeners to ensure it works
            editButton.addEventListener('click', function(e) {
                console.log('Edit button clicked!');
                e.preventDefault();
                e.stopPropagation();
                enableEditMode();
            });
            
            editButton.addEventListener('mousedown', function(e) {
                console.log('Edit button mousedown!');
                e.preventDefault();
                e.stopPropagation();
            });
            
            editButton.addEventListener('mouseup', function(e) {
                console.log('Edit button mouseup!');
                e.preventDefault();
                e.stopPropagation();
            });
            
            console.log('Edit button event listeners added');
        }
        
        if (saveButton) {
            saveButton.addEventListener('click', function() {
                console.log('Save button clicked!');
                saveChanges();
            });
            console.log('Save button event listener added');
        }
        
        if (cancelButton) {
            cancelButton.addEventListener('click', function() {
                console.log('Cancel button clicked!');
                cancelEdit();
            });
            console.log('Cancel button event listener added');
        }
        
        // Handle Enter key in input fields
        const inputs = [firstNameInput, lastNameInput, mobileInput, addressLine1Input, countryInput, stateInput, cityInput, pincodeInput];
        inputs.forEach(input => {
            if (input) {
                input.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        saveChanges();
                    }
                });
            }
        });
        
        // Make functions globally accessible for testing
        window.testEditMode = enableEditMode;
        window.testCancelEdit = cancelEdit;
        window.testSaveChanges = saveChanges;
        console.log('Test functions available: testEditMode(), testCancelEdit(), testSaveChanges()');
        
        // Test if button is clickable
        
    });
</script>


