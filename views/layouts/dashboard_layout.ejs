<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MedConnect | Modern Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&family=Montserrat:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/dashboard.css">
    <link rel="stylesheet" href="/css/dashboard-sidebar.css">
    <% if (typeof activePage !== 'undefined' && activePage === 'donate') { %>
    <link rel="stylesheet" href="/css/donate.css">
    <% } %>
</head>
<body>
    <header class="header">
        <div class="header-container">
            <div class="logo">
                <div class="logo-icon">
                    <i class="fas fa-heartbeat"></i>
                </div>
                <h1>MedConnect</h1>
            </div>
            <div class="user-info">
                <div class="notifications" id="notificationIcon">
                    <i class="fas fa-bell"></i>
                    <% if (typeof unreadNotifications !== 'undefined' && unreadNotifications > 0) { %>
                        <div class="notification-badge"><%= unreadNotifications %></div>
                    <% } %>
                </div>
                <div class="notification-dropdown" id="notificationDropdown">
                    <div class="notification-header">
                        <h3>Notifications</h3>
                        <button class="mark-all-read" id="markAllRead">Mark all read</button>
                    </div>
                    <div class="notification-list" id="notificationList">
                        <div class="loading-notifications">
                            <i class="fas fa-spinner fa-spin"></i>
                            <span>Loading notifications...</span>
                        </div>
                    </div>
                    <div class="notification-footer">
                        <a href="/dashboard/notifications-page" class="view-all-notifications">View all notifications</a>
                    </div>
                </div>
                <a href="/dashboard/profile" class="user-avatar-link">
                    <div class="user-avatar"><%= user ? user.initials : 'U' %></div>
                </a>
            </div>
        </div>
    </header>
    <div class="dashboard-container">
        <!-- Sidebar Navigation -->
        <aside class="sidebar">
            <a href="/dashboard" class="nav-item<%= (typeof activePage !== 'undefined' && activePage === 'dashboard') ? ' active' : '' %>">
                <i class="fas fa-home"></i>
                <span>Dashboard</span>
            </a>
            <a href="/donate" class="nav-item<%= (typeof activePage !== 'undefined' && activePage === 'donate') ? ' active' : '' %>">
                <i class="fas fa-pills"></i>
                <span>Donate Medicines</span>
            </a>
            <a href="/dashboard/browse" class="nav-item<%= (typeof activePage !== 'undefined' && activePage === 'browse') ? ' active' : '' %>">
                <i class="fas fa-search"></i>
                <span>Browse Medicines</span>
            </a>
            <a href="/dashboard/donor" class="nav-item<%= (typeof activePage !== 'undefined' && activePage === 'donor') ? ' active' : '' %>">
                <i class="fas fa-history"></i>
                <span>My Donations</span>
            </a>
            <a href="/dashboard/requests" class="nav-item<%= (typeof activePage !== 'undefined' && activePage === 'requests') ? ' active' : '' %>">
                <i class="fas fa-hand-holding-medical"></i>
                <span>My Requests</span>
            </a>
            <a href="/dashboard/profile" class="nav-item<%= (typeof activePage !== 'undefined' && activePage === 'profile') ? ' active' : '' %>">
                <i class="fas fa-user"></i>
                <span>My Profile</span>
            </a>
            <a href="/dashboard/settings" class="nav-item<%= (typeof activePage !== 'undefined' && activePage === 'settings') ? ' active' : '' %>">
                <i class="fas fa-cog"></i>
                <span>Settings</span>
            </a>
            <a href="/dashboard/logout" class="nav-item<%= (typeof activePage !== 'undefined' && activePage === 'logout') ? ' active' : '' %>">
                <i class="fas fa-sign-out-alt"></i>
                <span>Logout</span>
            </a>
        </aside>
        <%- body %>
    </div>
    
    <!-- Logout Confirmation Modal -->
    <div class="modal" id="logoutModal">
        <div class="modal-content confirmation-modal">
            <div class="modal-header">
                <div class="header-content">
                    <div class="header-icon">
                        <i class="fas fa-sign-out-alt"></i>
                    </div>
                    <div class="header-text">
                        <h3>Confirm Logout</h3>
                        <p class="header-subtitle">Are you sure you want to logout from MedConnect?</p>
                    </div>
                </div>
                <button class="close-modal" onclick="closeLogoutModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="modal-body">
                <div class="confirmation-content">
                    <p>You will be logged out of your account and redirected to the login page. Any unsaved changes will be lost.</p>
                    <div class="logout-summary">
                        <div class="summary-item">
                            <i class="fas fa-user"></i>
                            <span>You will be logged out of your account</span>
                        </div>
                        <div class="summary-item">
                            <i class="fas fa-exclamation-triangle"></i>
                            <span>Any unsaved changes will be lost</span>
                        </div>
                        <div class="summary-item">
                            <i class="fas fa-sign-in-alt"></i>
                            <span style="text-align: left;">You'll need to login again to access dashboard</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="modal-footer">
                <button class="btn-secondary" onclick="closeLogoutModal()">Stay Logged In</button>
                <button class="btn-danger" id="confirmLogoutBtn">
                    <i class="fas fa-sign-out-alt"></i>
                    Yes, Logout
                </button>
            </div>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Handle logout with confirmation modal
            const logoutLink = document.querySelector('a[href="/dashboard/logout"]');
            
            if (logoutLink) {
                logoutLink.addEventListener('click', function(e) {
                    e.preventDefault();
                    openLogoutModal();
                });
            }
            
            // Setup logout modal event listeners
            setupLogoutModalListeners();
            
            // Notification dropdown functionality
            const notificationIcon = document.getElementById('notificationIcon');
            const notificationDropdown = document.getElementById('notificationDropdown');
            const notificationList = document.getElementById('notificationList');
            const markAllReadBtn = document.getElementById('markAllRead');
            
            if (notificationIcon && notificationDropdown) {
                // Toggle dropdown
                notificationIcon.addEventListener('click', function(e) {
                    e.stopPropagation();
                    notificationDropdown.classList.toggle('active');
                    
                    // Load notifications when dropdown is opened
                    if (notificationDropdown.classList.contains('active')) {
                        loadNotifications();
                    }
                });
                
                // Close dropdown when clicking outside
                document.addEventListener('click', function(e) {
                    if (!notificationIcon.contains(e.target) && !notificationDropdown.contains(e.target)) {
                        notificationDropdown.classList.remove('active');
                    }
                });
                
                // Mark all notifications as read
                if (markAllReadBtn) {
                    markAllReadBtn.addEventListener('click', function() {
                        markAllNotificationsAsRead();
                    });
                }
            }
            
            // Load notifications
            async function loadNotifications() {
                try {
                    const response = await fetch('/dashboard/notifications?page=1');
                    const data = await response.json();
                    
                    if (data.error) {
                        notificationList.innerHTML = '<div class="notification-error">Error loading notifications</div>';
                        return;
                    }
                    
                    displayNotifications(data.notifications);
                } catch (error) {
                    console.error('Error loading notifications:', error);
                    notificationList.innerHTML = '<div class="notification-error">Error loading notifications</div>';
                }
            }
            
            // Display notifications
            function displayNotifications(notifications) {
                if (!notifications || notifications.length === 0) {
                    notificationList.innerHTML = '<div class="no-notifications">No notifications</div>';
                    return;
                }
                
                const notificationsHTML = notifications.map(notification => `
                    <div class="notification-item ${notification.read ? 'read' : 'unread'}" data-id="${notification._id}">
                        <div class="notification-icon">
                            <i class="fas ${getNotificationIcon(notification.type)}"></i>
                        </div>
                        <div class="notification-content">
                            <div class="notification-title">${notification.title}</div>
                            <div class="notification-message">${notification.message}</div>
                            <div class="notification-time">${notification.formattedTime}</div>
                        </div>
                        ${!notification.read ? '<div class="notification-unread-dot"></div>' : ''}
                    </div>
                `).join('');
                
                notificationList.innerHTML = notificationsHTML;
                
                // Add click handlers for individual notifications
                notificationList.querySelectorAll('.notification-item').forEach(item => {
                    item.addEventListener('click', function() {
                        const notificationId = this.dataset.id;
                        markNotificationAsRead(notificationId);
                    });
                });
            }
            
            // Get notification icon based on type
            function getNotificationIcon(type) {
                const icons = {
                    'request_sent': 'fa-paper-plane',
                    'request_received': 'fa-inbox',
                    'request_accepted': 'fa-check-circle',
                    'request_rejected': 'fa-times-circle',
                    'request_completed': 'fa-check-double',
                    'donation_completed': 'fa-gift',
                    'donation_failed': 'fa-exclamation-triangle',
                    'request_cancelled': 'fa-ban',
                    'medicine_donated': 'fa-pills',
                    'medicine_expiring': 'fa-clock',
                    'profile_updated': 'fa-user-edit',
                    'welcome': 'fa-heart',
                    'system': 'fa-cog'
                };
                return icons[type] || 'fa-bell';
            }
            
            // Mark notification as read
            async function markNotificationAsRead(notificationId) {
                try {
                    const response = await fetch(`/dashboard/notifications/${notificationId}/read`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    
                    if (response.ok) {
                        // Update UI
                        const notificationItem = document.querySelector(`[data-id="${notificationId}"]`);
                        if (notificationItem) {
                            notificationItem.classList.remove('unread');
                            notificationItem.classList.add('read');
                            const unreadDot = notificationItem.querySelector('.notification-unread-dot');
                            if (unreadDot) {
                                unreadDot.remove();
                            }
                        }
                        
                        // Update badge count
                        updateNotificationBadge();
                    }
                } catch (error) {
                    console.error('Error marking notification as read:', error);
                }
            }
            
            // Mark all notifications as read
            async function markAllNotificationsAsRead() {
                try {
                    const response = await fetch('/dashboard/notifications/read-all', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    
                    if (response.ok) {
                        // Update UI
                        notificationList.querySelectorAll('.notification-item').forEach(item => {
                            item.classList.remove('unread');
                            item.classList.add('read');
                            const unreadDot = item.querySelector('.notification-unread-dot');
                            if (unreadDot) {
                                unreadDot.remove();
                            }
                        });
                        
                        // Update badge count
                        updateNotificationBadge();
                        
                        // Update button text
                        markAllReadBtn.textContent = 'All read';
                        markAllReadBtn.disabled = true;
                    }
                } catch (error) {
                    console.error('Error marking all notifications as read:', error);
                }
            }
            
            // Update notification badge
            async function updateNotificationBadge() {
                try {
                    const response = await fetch('/dashboard/notifications?page=1');
                    const data = await response.json();
                    
                    const unreadCount = data.notifications.filter(n => !n.read).length;
                    const badge = notificationIcon.querySelector('.notification-badge');
                    
                    if (unreadCount > 0) {
                        if (badge) {
                            badge.textContent = unreadCount;
                        } else {
                            const newBadge = document.createElement('div');
                            newBadge.className = 'notification-badge';
                            newBadge.textContent = unreadCount;
                            notificationIcon.appendChild(newBadge);
                        }
                    } else {
                        if (badge) {
                            badge.remove();
                        }
                    }
                } catch (error) {
                    console.error('Error updating notification badge:', error);
                }
            }
        });
        
        function openLogoutModal() {
            const modal = document.getElementById('logoutModal');
            if (modal) {
                modal.classList.add('active');
                // Don't change body overflow to prevent scroll bars
            }
        }
        
        function closeLogoutModal() {
            const modal = document.getElementById('logoutModal');
            if (modal) {
                modal.classList.remove('active');
                // Don't change body overflow to prevent scroll bars
            }
        }
        
        function setupLogoutModalListeners() {
            const logoutModal = document.getElementById('logoutModal');
            const confirmLogoutBtn = document.getElementById('confirmLogoutBtn');
            
            if (logoutModal) {
                // Close modal when clicking outside
                logoutModal.addEventListener('click', function(e) {
                    if (e.target === logoutModal) {
                        closeLogoutModal();
                    }
                });
            }
            
            if (confirmLogoutBtn) {
                // Handle logout confirmation
                confirmLogoutBtn.addEventListener('click', function() {
                    // Show loading state
                    const originalText = this.innerHTML;
                    this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Logging out...';
                    this.disabled = true;
                    
                    // Redirect to logout
                    window.location.href = '/dashboard/logout';
                });
            }
        }
        
    </script>
</body> 
</html>