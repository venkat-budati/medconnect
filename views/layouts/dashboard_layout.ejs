<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MedConnect | Modern Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&family=Montserrat:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/dashboard.css">
    <link rel="stylesheet" href="/css/dashboard-sidebar.css">
    <style>
        /* Profile Completion Modal Styles */
        .profile-completion-modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            backdrop-filter: blur(5px);
        }

        .profile-completion-modal-content {
            background: white;
            border-radius: 16px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            max-width: 500px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            animation: profileCompletionModalSlideIn 0.3s ease-out;
        }

        @keyframes profileCompletionModalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-50px) scale(0.9);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        .profile-completion-modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 24px;
            border-bottom: 1px solid #e1e5e9;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 16px 16px 0 0;
        }

        .profile-completion-modal-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .profile-completion-modal-close {
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: background-color 0.2s;
        }

        .profile-completion-modal-close:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .profile-completion-modal-body {
            padding: 30px 24px;
            text-align: center;
        }

        .profile-completion-modal-icon {
            font-size: 48px;
            color: #667eea;
            margin-bottom: 20px;
        }

        .profile-completion-modal-body h4 {
            margin: 0 0 15px 0;
            font-size: 20px;
            font-weight: 600;
            color: #333;
        }

        .profile-completion-modal-body p {
            margin: 0 0 25px 0;
            color: #666;
            line-height: 1.6;
            font-size: 14px;
        }

        .profile-completion-modal-actions {
            display: flex;
            gap: 12px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .profile-completion-modal-actions .btn {
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 500;
            font-size: 14px;
            border: none;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 8px;
            min-width: 140px;
            justify-content: center;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .btn-secondary {
            background: #f8f9fa;
            color: #666;
            border: 1px solid #e1e5e9;
        }

        .btn-secondary:hover {
            background: #e9ecef;
            transform: translateY(-1px);
        }

        /* Responsive Design */
        @media (max-width: 600px) {
            .modal-content {
                width: 95%;
                margin: 20px;
            }

            .modal-header {
                padding: 16px 20px;
            }

            .modal-body {
                padding: 24px 20px;
            }

            .modal-actions {
                flex-direction: column;
            }

            .modal-actions .btn {
                width: 100%;
            }
        }

        /* Sidebar Toggle Button */
        .sidebar-toggle {
            display: none;
            background: none;
            border: none;
            color: var(--primary);
            font-size: 20px;
            cursor: pointer;
            padding: 8px;
            border-radius: 8px;
            transition: all 0.3s ease;
            margin-right: 15px;
        }

        .sidebar-toggle:hover {
            background: rgba(42, 124, 199, 0.1);
            transform: scale(1.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        /* Sidebar Header */
        .sidebar-header {
            display: none;
            justify-content: space-between;
            align-items: center;
            padding: 20px 25px;
            border-bottom: 1px solid var(--glass-border);
            background: rgba(255, 255, 255, 0.1);
        }

        .sidebar-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
            color: var(--dark);
        }

        .sidebar-close {
            display: none;
            background: none;
            border: none;
            color: var(--gray);
            font-size: 18px;
            cursor: pointer;
            padding: 8px;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .sidebar-close:hover {
            background: rgba(0, 0, 0, 0.1);
            color: var(--dark);
        }

        /* Responsive Sidebar */
        @media (max-width: 1100px) {
            .sidebar-toggle {
                display: block;
            }

            .sidebar-header {
                display: flex;
            }

            .sidebar-close {
                display: block;
            }

            .sidebar {
                position: fixed;
                top: 0;
                left: -300px;
                height: 100vh;
                z-index: 1000;
                transition: left 0.3s ease;
                box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
            }

            .sidebar.active {
                left: 0;
            }

            .dashboard-container {
                margin-left: 0;
            }

            /* Overlay when sidebar is open */
            .sidebar-overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.5);
                z-index: 999;
                opacity: 0;
                visibility: hidden;
                transition: all 0.3s ease;
            }

            .sidebar-overlay.active {
                opacity: 1;
                visibility: visible;
            }
        }

        @media (max-width: 768px) {
            .header-container {
                padding: 0 20px;
            }

            .logo h1 {
                font-size: 20px;
            }

            .sidebar {
                width: 280px;
                left: -280px;
            }
        }

        @media (max-width: 480px) {
            .sidebar {
                width: 100%;
                left: -100%;
            }

            .sidebar .nav-item {
                padding: 20px 25px;
                font-size: 18px;
            }

            .sidebar .nav-item i {
                font-size: 20px;
            }
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="header-container">
            <div class="header-left">
                <button class="sidebar-toggle" id="sidebarToggle">
                    <i class="fas fa-bars"></i>
                </button>
                <div class="logo">
                    <div class="logo-icon">
                        <i class="fas fa-heartbeat"></i>
                    </div>
                    <h1>MedConnect</h1>
                </div>
            </div>
            <div class="user-info">
                <div class="notifications" id="notificationIcon">
                    <i class="fas fa-bell"></i>
                    <% if (typeof unreadNotifications !== 'undefined' && unreadNotifications > 0) { %>
                        <div class="notification-badge"><%= unreadNotifications %></div>
                    <% } %>
                </div>
                <div class="notification-dropdown" id="notificationDropdown">
                    <div class="notification-header">
                        <h3>Notifications</h3>
                        <button class="mark-all-read" id="markAllRead">Mark all read</button>
                    </div>
                    <div class="notification-list" id="notificationList">
                        <div class="loading-notifications">
                            <i class="fas fa-spinner fa-spin"></i>
                            <span>Loading notifications...</span>
                        </div>
                    </div>
                    <div class="notification-footer">
                        <a href="/dashboard/notifications-page" class="view-all-notifications">View all notifications</a>
                    </div>
                </div>
                <a href="/dashboard/profile" class="user-avatar-link">
                    <div class="user-avatar"><%= user ? user.initials : 'U' %></div>
                </a>
            </div>
        </div>
    </header>
    <!-- Sidebar Overlay -->
    <div class="sidebar-overlay" id="sidebarOverlay"></div>
    
    <div class="dashboard-container">
        <!-- Sidebar Navigation -->
        <aside class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <h3>Menu</h3>
                <button class="sidebar-close" id="sidebarClose">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <a href="/dashboard" class="nav-item<%= (typeof activePage !== 'undefined' && activePage === 'dashboard') ? ' active' : '' %>">
                <i class="fas fa-home"></i>
                <span>Dashboard</span>
            </a>
            <a href="/donate" class="nav-item<%= (typeof activePage !== 'undefined' && activePage === 'donate') ? ' active' : '' %>">
                <i class="fas fa-pills"></i>
                <span>Donate Medicines</span>
            </a>
            <a href="/dashboard/browse" class="nav-item<%= (typeof activePage !== 'undefined' && activePage === 'browse') ? ' active' : '' %>">
                <i class="fas fa-search"></i>
                <span>Browse Medicines</span>
            </a>
            <a href="/dashboard/donor" class="nav-item<%= (typeof activePage !== 'undefined' && activePage === 'donor') ? ' active' : '' %>">
                <i class="fas fa-history"></i>
                <span>My Donations</span>
            </a>
            <a href="/dashboard/requests" class="nav-item<%= (typeof activePage !== 'undefined' && activePage === 'requests') ? ' active' : '' %>">
                <i class="fas fa-hand-holding-medical"></i>
                <span>My Requests</span>
            </a>
            <a href="/dashboard/profile" class="nav-item<%= (typeof activePage !== 'undefined' && activePage === 'profile') ? ' active' : '' %>">
                <i class="fas fa-user"></i>
                <span>My Profile</span>
            </a>
            <a href="/dashboard/settings" class="nav-item<%= (typeof activePage !== 'undefined' && activePage === 'settings') ? ' active' : '' %>">
                <i class="fas fa-cog"></i>
                <span>Settings</span>
            </a>
            <a href="/dashboard/logout" class="nav-item<%= (typeof activePage !== 'undefined' && activePage === 'logout') ? ' active' : '' %>">
                <i class="fas fa-sign-out-alt"></i>
                <span>Logout</span>
            </a>
        </aside>
        <%- body %>
    </div>
    
    <!-- Logout Confirmation Modal -->
    <div class="modal" id="logoutModal">
        <div class="modal-content confirmation-modal">
            <div class="modal-header">
                <div class="header-content">
                    <div class="header-icon">
                        <i class="fas fa-sign-out-alt"></i>
                    </div>
                    <div class="header-text">
                        <h3>Confirm Logout</h3>
                        <p class="header-subtitle">Are you sure you want to logout from MedConnect?</p>
                    </div>
                </div>
                <button class="close-modal" onclick="closeLogoutModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="modal-body">
                <div class="confirmation-content">
                    <p>You will be logged out of your account and redirected to the login page. Any unsaved changes will be lost.</p>
                    <div class="logout-summary">
                        <div class="summary-item">
                            <i class="fas fa-user"></i>
                            <span>You will be logged out of your account</span>
                        </div>
                        <div class="summary-item">
                            <i class="fas fa-exclamation-triangle"></i>
                            <span>Any unsaved changes will be lost</span>
                        </div>
                        <div class="summary-item">
                            <i class="fas fa-sign-in-alt"></i>
                            <span style="text-align: left;">You'll need to login again to access dashboard</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="modal-footer">
                <button class="btn-secondary" onclick="closeLogoutModal()">Stay Logged In</button>
                <button class="btn-danger" id="confirmLogoutBtn">
                    <i class="fas fa-sign-out-alt"></i>
                    Yes, Logout
                </button>
            </div>
        </div>
    </div>

    <!-- Profile Completion Modal -->
    <div id="profileCompletionModal" class="profile-completion-modal-overlay" style="display: none;">
        <div class="profile-completion-modal-content">
            <div class="profile-completion-modal-header">
                <h3><i class="fas fa-exclamation-triangle"></i> Complete Your Profile</h3>
                <button class="profile-completion-modal-close" id="modalClose">&times;</button>
            </div>
            <div class="profile-completion-modal-body">
                <div class="profile-completion-modal-icon">
                    <i class="fas fa-user-edit"></i>
                </div>
                <h4>Profile Completion Required</h4>
                <p>Please complete your profile information to access all features of MedConnect. This helps us provide better service and connect you with nearby medicines.</p>
                <div class="profile-completion-modal-actions">
                    <button class="btn btn-primary" id="completeProfileBtn">
                        <i class="fas fa-user-edit"></i> Complete Profile
                    </button>
                    <button class="btn btn-secondary" id="modalCancelBtn">Cancel</button>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Sidebar toggle functionality
            const sidebarToggle = document.getElementById('sidebarToggle');
            const sidebar = document.getElementById('sidebar');
            const sidebarOverlay = document.getElementById('sidebarOverlay');
            
            // Toggle sidebar
            if (sidebarToggle) {
                sidebarToggle.addEventListener('click', function() {
                    sidebar.classList.toggle('active');
                    sidebarOverlay.classList.toggle('active');
                    document.body.style.overflow = sidebar.classList.contains('active') ? 'hidden' : '';
                });
            }
            
            // Close sidebar when clicking overlay
            if (sidebarOverlay) {
                sidebarOverlay.addEventListener('click', function() {
                    sidebar.classList.remove('active');
                    sidebarOverlay.classList.remove('active');
                    document.body.style.overflow = '';
                });
            }
            
            // Close sidebar when clicking close button
            const sidebarClose = document.getElementById('sidebarClose');
            if (sidebarClose) {
                sidebarClose.addEventListener('click', function() {
                    sidebar.classList.remove('active');
                    sidebarOverlay.classList.remove('active');
                    document.body.style.overflow = '';
                });
            }
            
            // Close sidebar when clicking on a nav item (mobile)
            const navItems = document.querySelectorAll('.sidebar .nav-item');
            navItems.forEach(item => {
                item.addEventListener('click', function() {
                    if (window.innerWidth <= 1100) {
                        sidebar.classList.remove('active');
                        sidebarOverlay.classList.remove('active');
                        document.body.style.overflow = '';
                    }
                });
            });
            
            // Handle logout with confirmation modal
            const logoutLink = document.querySelector('a[href="/dashboard/logout"]');
            
            if (logoutLink) {
                logoutLink.addEventListener('click', function(e) {
                    e.preventDefault();
                    openLogoutModal();
                });
            }
            
            // Setup logout modal event listeners
            setupLogoutModalListeners();
            
            // Notification dropdown functionality
            const notificationIcon = document.getElementById('notificationIcon');
            const notificationDropdown = document.getElementById('notificationDropdown');
            const notificationList = document.getElementById('notificationList');
            const markAllReadBtn = document.getElementById('markAllRead');
            
            if (notificationIcon && notificationDropdown) {
                // Toggle dropdown
                notificationIcon.addEventListener('click', function(e) {
                    e.stopPropagation();
                    notificationDropdown.classList.toggle('active');
                    
                    // Load notifications when dropdown is opened
                    if (notificationDropdown.classList.contains('active')) {
                        loadNotifications();
                    }
                });
                
                // Close dropdown when clicking outside
                document.addEventListener('click', function(e) {
                    if (!notificationIcon.contains(e.target) && !notificationDropdown.contains(e.target)) {
                        notificationDropdown.classList.remove('active');
                    }
                });
                
                // Mark all notifications as read
                if (markAllReadBtn) {
                    markAllReadBtn.addEventListener('click', function() {
                        markAllNotificationsAsRead();
                    });
                }
            }
            
            // Load notifications
            async function loadNotifications() {
                try {
                    const response = await fetch('/dashboard/notifications?page=1');
                    const data = await response.json();
                    
                    if (data.error) {
                        notificationList.innerHTML = '<div class="notification-error">Error loading notifications</div>';
                        return;
                    }
                    
                    displayNotifications(data.notifications);
                } catch (error) {
                    console.error('Error loading notifications:', error);
                    notificationList.innerHTML = '<div class="notification-error">Error loading notifications</div>';
                }
            }
            
            // Display notifications
            function displayNotifications(notifications) {
                if (!notifications || notifications.length === 0) {
                    notificationList.innerHTML = '<div class="no-notifications">No notifications</div>';
                    return;
                }
                
                const notificationsHTML = notifications.map(notification => `
                    <div class="notification-item ${notification.read ? 'read' : 'unread'}" data-id="${notification._id || ''}">
                        <div class="notification-icon">
                            <i class="fas ${getNotificationIcon(notification.type)}"></i>
                        </div>
                        <div class="notification-content">
                            <div class="notification-title">${notification.title || 'Notification'}</div>
                            <div class="notification-message">${notification.message || 'No message available'}</div>
                            <div class="notification-time">${formatTimeAgo(notification.createdAt)}</div>
                        </div>
                        ${!notification.read ? '<div class="notification-unread-dot"></div>' : ''}
                    </div>
                `).join('');
                
                notificationList.innerHTML = notificationsHTML;
                
                // Add click handlers for individual notifications
                notificationList.querySelectorAll('.notification-item').forEach(item => {
                    item.addEventListener('click', function() {
                        const notificationId = this.dataset.id;
                        markNotificationAsRead(notificationId);
                    });
                });
            }
            
            // Get notification icon based on type
            function getNotificationIcon(type) {
                const icons = {
                    'request_sent': 'fa-paper-plane',
                    'request_received': 'fa-inbox',
                    'request_accepted': 'fa-check-circle',
                    'request_rejected': 'fa-times-circle',
                    'request_completed': 'fa-check-double',
                    'donation_completed': 'fa-gift',
                    'donation_failed': 'fa-exclamation-triangle',
                    'request_cancelled': 'fa-ban',
                    'medicine_donated': 'fa-pills',
                    'medicine_expiring': 'fa-clock',
                    'profile_updated': 'fa-user-edit',
                    'welcome': 'fa-heart',
                    'system': 'fa-cog'
                };
                return icons[type] || 'fa-bell';
            }
            
            // Format time ago
            function formatTimeAgo(dateString) {
                // Handle undefined, null, or invalid date strings
                if (!dateString) {
                    return 'Recently';
                }
                
                const date = new Date(dateString);
                
                // Check if the date is valid
                if (isNaN(date.getTime())) {
                    return 'Recently';
                }
                
                const now = new Date();
                const diffInSeconds = Math.floor((now - date) / 1000);
                
                if (diffInSeconds < 60) return 'Just now';
                if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
                if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
                if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)}d ago`;
                
                return date.toLocaleDateString();
            }
            
            // Mark notification as read
            async function markNotificationAsRead(notificationId) {
                try {
                    const response = await fetch(`/dashboard/notifications/${notificationId}/read`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    
                    if (response.ok) {
                        // Update UI
                        const notificationItem = document.querySelector(`[data-id="${notificationId}"]`);
                        if (notificationItem) {
                            notificationItem.classList.remove('unread');
                            notificationItem.classList.add('read');
                            const unreadDot = notificationItem.querySelector('.notification-unread-dot');
                            if (unreadDot) {
                                unreadDot.remove();
                            }
                        }
                        
                        // Update badge count
                        updateNotificationBadge();
                    }
                } catch (error) {
                    console.error('Error marking notification as read:', error);
                }
            }
            
            // Mark all notifications as read
            async function markAllNotificationsAsRead() {
                try {
                    const response = await fetch('/dashboard/notifications/read-all', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    
                    if (response.ok) {
                        // Update UI
                        notificationList.querySelectorAll('.notification-item').forEach(item => {
                            item.classList.remove('unread');
                            item.classList.add('read');
                            const unreadDot = item.querySelector('.notification-unread-dot');
                            if (unreadDot) {
                                unreadDot.remove();
                            }
                        });
                        
                        // Update badge count
                        updateNotificationBadge();
                        
                        // Update button text
                        markAllReadBtn.textContent = 'All read';
                        markAllReadBtn.disabled = true;
                    }
                } catch (error) {
                    console.error('Error marking all notifications as read:', error);
                }
            }
            
            // Update notification badge
            async function updateNotificationBadge() {
                try {
                    const response = await fetch('/dashboard/notifications?page=1');
                    const data = await response.json();
                    
                    const unreadCount = data.notifications.filter(n => !n.read).length;
                    const badge = notificationIcon.querySelector('.notification-badge');
                    
                    if (unreadCount > 0) {
                        if (badge) {
                            badge.textContent = unreadCount;
                        } else {
                            const newBadge = document.createElement('div');
                            newBadge.className = 'notification-badge';
                            newBadge.textContent = unreadCount;
                            notificationIcon.appendChild(newBadge);
                        }
                    } else {
                        if (badge) {
                            badge.remove();
                        }
                    }
                } catch (error) {
                    console.error('Error updating notification badge:', error);
                }
            }

            // Profile Completion Modal Functionality
            const profileCompletionModal = document.getElementById('profileCompletionModal');
            const modalClose = document.getElementById('modalClose');
            const modalCancelBtn = document.getElementById('modalCancelBtn');
            const completeProfileBtn = document.getElementById('completeProfileBtn');

            // Function to show modal
            function showProfileCompletionModal() {
                profileCompletionModal.style.display = 'flex';
                document.body.style.overflow = 'hidden';
            }

            // Function to hide modal
            function hideProfileCompletionModal() {
                profileCompletionModal.style.display = 'none';
                document.body.style.overflow = 'auto';
            }

            // Close modal handlers
            if (modalClose) {
                modalClose.addEventListener('click', hideProfileCompletionModal);
            }

            if (modalCancelBtn) {
                modalCancelBtn.addEventListener('click', hideProfileCompletionModal);
            }

            // Complete profile button handler
            if (completeProfileBtn) {
                completeProfileBtn.addEventListener('click', function() {
                    hideProfileCompletionModal();
                    window.location.href = '/dashboard/profile';
                });
            }

            // Close modal when clicking outside
            profileCompletionModal.addEventListener('click', function(e) {
                if (e.target === profileCompletionModal) {
                    hideProfileCompletionModal();
                }
            });

            // Intercept sidebar navigation clicks
            const sidebarLinks = document.querySelectorAll('.sidebar .nav-item');
            sidebarLinks.forEach(link => {
                link.addEventListener('click', async function(e) {
                    // Don't intercept profile page or logout
                    if (this.getAttribute('href') === '/dashboard/profile' || 
                        this.getAttribute('href') === '/dashboard/logout' ||
                        this.getAttribute('href') === '/dashboard/settings') {
                        return;
                    }

                    e.preventDefault();
                    const href = this.getAttribute('href');

                    try {
                        // Make AJAX request to check profile completion
                        const response = await fetch(href, {
                            headers: {
                                'Accept': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });

                        if (response.status === 403) {
                            const data = await response.json();
                            if (data.requiresProfileCompletion) {
                                showProfileCompletionModal();
                                return;
                            }
                        }

                        // If no profile completion required, proceed with navigation
                        window.location.href = href;

                    } catch (error) {
                        console.error('Error checking profile completion:', error);
                        // Fallback to regular navigation
                        window.location.href = href;
                    }
                });
            });
        });
        
        function openLogoutModal() {
            const modal = document.getElementById('logoutModal');
            if (modal) {
                modal.classList.add('active');
                // Don't change body overflow to prevent scroll bars
            }
        }
        
        function closeLogoutModal() {
            const modal = document.getElementById('logoutModal');
            if (modal) {
                modal.classList.remove('active');
                // Don't change body overflow to prevent scroll bars
            }
        }
        
        function setupLogoutModalListeners() {
            const logoutModal = document.getElementById('logoutModal');
            const confirmLogoutBtn = document.getElementById('confirmLogoutBtn');
            
            if (logoutModal) {
                // Close modal when clicking outside
                logoutModal.addEventListener('click', function(e) {
                    if (e.target === logoutModal) {
                        closeLogoutModal();
                    }
                });
            }
            
            if (confirmLogoutBtn) {
                // Handle logout confirmation
                confirmLogoutBtn.addEventListener('click', function() {
                    // Show loading state
                    const originalText = this.innerHTML;
                    this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Logging out...';
                    this.disabled = true;
                    
                    // Redirect to logout
                    window.location.href = '/dashboard/logout';
                });
            }
        }
        
    </script>
</body> 
</html>