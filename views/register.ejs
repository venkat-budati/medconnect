<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MedConnect - Join Our Healthcare Community</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: #2a7cc7;
            --primary-dark: #1e5a9b;
            --secondary: #34b27b;
            --accent: #ff6b6b;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --light-gray: #e9ecef;
            --card-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        body {
            font-family: 'Roboto', sans-serif;
            background: linear-gradient(135deg, #e0f7fa 0%, #f5f5f5 100%);
            color: var(--dark);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
            position: relative;
            overflow-x: hidden;
        }

        .background-shapes {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            overflow: hidden;
        }

        .shape {
            position: absolute;
            border-radius: 50%;
            opacity: 0.1;
        }

        .shape-1 {
            width: 300px;
            height: 300px;
            background: var(--primary);
            top: -100px;
            left: -100px;
        }

        .shape-2 {
            width: 200px;
            height: 200px;
            background: var(--secondary);
            bottom: -50px;
            right: 100px;
        }

        .shape-3 {
            width: 150px;
            height: 150px;
            background: var(--accent);
            top: 150px;
            right: -50px;
        }

        .container {
            display: flex;
            max-width: 1200px;
            width: 100%;
            box-shadow: var(--card-shadow);
            border-radius: 20px;
            overflow: hidden;
            background: white;
            z-index: 10;
        }

        .left-panel {
            flex: 1;
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
            color: white;
            padding: 60px 40px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }

        .left-panel::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" preserveAspectRatio="none"><polygon points="0,0 100,100 0,100" fill="rgba(255,255,255,0.05)" /></svg>');
            background-size: cover;
        }

        .logo {
            display: flex;
            align-items: center;
            margin-bottom: 40px;
        }

        .logo-icon {
            font-size: 36px;
            margin-right: 15px;
        }

        .logo h1 {
            font-size: 28px;
            font-weight: 700;
            letter-spacing: 1px;
        }

        .panel-content {
            max-width: 500px;
            z-index: 2;
        }

        .panel-content h2 {
            font-size: 32px;
            font-weight: 700;
            margin-bottom: 20px;
            font-family: 'Poppins', sans-serif;
        }

        .panel-content p {
            font-size: 18px;
            line-height: 1.6;
            margin-bottom: 25px;
            opacity: 0.9;
        }

        .features {
            margin-top: 30px;
        }

        .feature {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            font-size: 16px;
        }

        .feature i {
            margin-right: 12px;
            color: var(--secondary);
            font-size: 18px;
        }

        .right-panel {
            flex: 1;
            padding: 60px 40px;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .form-header {
            margin-bottom: 40px;
            text-align: center;
        }

        .form-header h2 {
            font-size: 28px;
            color: var(--primary);
            font-weight: 700;
            margin-bottom: 10px;
            font-family: 'Poppins', sans-serif;
        }

        .form-header p {
            color: var(--gray);
            font-size: 16px;
        }

        .form-container {
            max-width: 450px;
            margin: 0 auto;
            width: 100%;
        }

        .form-row {
            display: flex;
            gap: 15px;
            margin-bottom: 25px;
        }

        .form-row .input-group {
            flex: 1;
            margin-bottom: 0;
        }

        .input-group {
            margin-bottom: 25px;
            position: relative;
        }

        .input-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--dark);
            font-size: 15px;
        }

        .input-icon {
            position: absolute;
            left: 15px;
            top: 42px;
            color: var(--gray);
        }

        .input-group input {
            width: 100%;
            padding: 15px 15px 15px 45px;
            border: 2px solid var(--light-gray);
            border-radius: 10px;
            font-size: 16px;
            transition: var(--transition);
        }

        .input-group input:focus {
            border-color: var(--primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(42, 124, 199, 0.2);
        }

        .password-container {
            position: relative;
        }

        .toggle-password {
            position: absolute;
            right: 15px;
            top: 15px;
            cursor: pointer;
            color: var(--gray);
        }

        .otp-section {
            display: none;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid var(--light-gray);
        }

        .otp-inputs {
            display: flex;
            justify-content: space-between;
            margin: 20px 0;
        }

        .otp-inputs input {
            width: 55px;
            height: 55px;
            text-align: center;
            font-size: 22px;
            border: 2px solid var(--light-gray);
            border-radius: 10px;
            transition: var(--transition);
        }

        .otp-inputs input:focus {
            border-color: var(--primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(42, 124, 199, 0.2);
        }

        .timer {
            text-align: center;
            margin: 15px 0;
            font-size: 14px;
            color: var(--gray);
        }

        .resend-otp {
            text-align: center;
            margin-top: 15px;
        }

        .resend-otp a {
            color: var(--primary);
            text-decoration: none;
            font-weight: 500;
            cursor: pointer;
        }

        .resend-otp a:hover {
            text-decoration: underline;
        }

        .btn {
            display: block;
            width: 100%;
            padding: 16px;
            border: none;
            border-radius: 10px;
            font-size: 17px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            text-align: center;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
            margin-top: 10px;
        }

        .btn-primary:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
        }

        .btn-secondary {
            background: var(--light-gray);
            color: var(--dark);
            margin-top: 15px;
        }

        .btn-secondary:hover {
            background: #dee2e6;
        }

        .login-link {
            text-align: center;
            margin-top: 25px;
            font-size: 15px;
        }

        .login-link a {
            color: var(--primary);
            text-decoration: none;
            font-weight: 500;
        }

        .login-link a:hover {
            text-decoration: underline;
        }

        .terms {
            margin-top: 20px;
            font-size: 14px;
            color: var(--gray);
            text-align: center;
        }

        .terms a {
            color: var(--primary);
            text-decoration: none;
        }

        /* Responsive design */
        @media (max-width: 900px) {
            .container {
                flex-direction: column;
            }
            
            .left-panel {
                padding: 40px 30px;
            }
            
            .right-panel {
                padding: 40px 30px;
            }
            
            .panel-content h2 {
                font-size: 28px;
            }
            
            .form-row {
                flex-direction: column;
                gap: 0;
            }
            
            .form-row .input-group {
                margin-bottom: 25px;
            }
        }

        @media (max-width: 480px) {
            .otp-inputs input {
                width: 45px;
                height: 45px;
                font-size: 18px;
            }
            
            .input-group input {
                padding: 12px 12px 12px 40px;
            }
            
            .input-icon {
                top: 37px;
            }
        }

        /* Animation for OTP section */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

                 .show-otp {
             display: block;
             animation: fadeIn 0.5s ease-out;
         }
         
         .password-validation {
             margin-bottom: 15px;
             padding: 8px 12px;
             border-radius: 6px;
             font-size: 14px;
             font-weight: 500;
             text-align: center;
             transition: all 0.3s ease;
         }
         
         .password-validation.success {
             background-color: rgba(52, 178, 123, 0.1);
             color: #28a745;
             border: 1px solid rgba(52, 178, 123, 0.3);
         }
         
         .password-validation.error {
             background-color: rgba(220, 53, 69, 0.1);
             color: #dc3545;
             border: 1px solid rgba(220, 53, 69, 0.3);
         }
         
         .password-validation.warning {
             background-color: rgba(255, 193, 7, 0.1);
             color: #ffc107;
             border: 1px solid rgba(255, 193, 7, 0.3);
         }
         
         /* Password Strength Checker Styles */
         .password-strength-container {
             margin-top: 10px;
             padding: 15px;
             background: #f8f9fa;
             border-radius: 8px;
             border: 1px solid #e9ecef;
         }
         
         .strength-meter {
             width: 100%;
             height: 6px;
             background: #e9ecef;
             border-radius: 3px;
             margin-bottom: 10px;
             overflow: hidden;
         }
         
         .strength-fill {
             height: 100%;
             width: 0%;
             transition: all 0.3s ease;
             border-radius: 3px;
         }
         
         .strength-fill.very-weak { background: #dc3545; width: 20%; }
         .strength-fill.weak { background: #fd7e14; width: 40%; }
         .strength-fill.fair { background: #ffc107; width: 60%; }
         .strength-fill.good { background: #20c997; width: 80%; }
         .strength-fill.strong { background: #28a745; width: 100%; }
         
         .strength-text {
             font-size: 14px;
             font-weight: 500;
             margin-bottom: 8px;
         }
         
         .strength-text.very-weak { color: #dc3545; }
         .strength-text.weak { color: #fd7e14; }
         .strength-text.fair { color: #ffc107; }
         .strength-text.good { color: #20c997; }
         .strength-text.strong { color: #28a745; }
         
         .strength-requirements {
             display: grid;
             grid-template-columns: 1fr 1fr;
             gap: 8px;
             font-size: 12px;
         }
         
         .requirement {
             display: flex;
             align-items: center;
             gap: 6px;
             padding: 4px 8px;
             border-radius: 4px;
             background: white;
             border: 1px solid #e9ecef;
         }
         
         .requirement.met {
             background: rgba(40, 167, 69, 0.1);
             border-color: rgba(40, 167, 69, 0.3);
             color: #28a745;
         }
         
         .requirement.not-met {
             background: rgba(220, 53, 69, 0.1);
             border-color: rgba(220, 53, 69, 0.3);
             color: #dc3545;
         }
         
         .requirement i {
             font-size: 10px;
         }
         
         /* Loader styles */
         .btn.loading {
             position: relative;
             color: transparent;
             pointer-events: none;
         }
         
         .btn.loading::after {
             content: '';
             position: absolute;
             top: 50%;
             left: 50%;
             width: 20px;
             height: 20px;
             margin: -10px 0 0 -10px;
             border: 2px solid transparent;
             border-top: 2px solid white;
             border-radius: 50%;
             animation: spin 1s linear infinite;
         }
         
         @keyframes spin {
             0% { transform: rotate(0deg); }
             100% { transform: rotate(360deg); }
         }
         
         /* Success message styles */
         .success-message {
             background-color: rgba(52, 178, 123, 0.1);
             color: #28a745;
             border: 1px solid rgba(52, 178, 123, 0.3);
             padding: 12px 16px;
             border-radius: 8px;
             margin-bottom: 20px;
             font-size: 14px;
             font-weight: 500;
             text-align: center;
             display: none;
             animation: slideDown 0.3s ease-out;
         }
         
         @keyframes slideDown {
             from {
                 opacity: 0;
                 transform: translateY(-10px);
             }
             to {
                 opacity: 1;
                 transform: translateY(0);
             }
         }
    </style>
</head>
<body>
    <div class="background-shapes">
        <div class="shape shape-1"></div>
        <div class="shape shape-2"></div>
        <div class="shape shape-3"></div>
    </div>
    
    <div class="container">
        <div class="left-panel">
            <div class="logo">
                <div class="logo-icon">
                    <i class="fas fa-heartbeat"></i>
                </div>
                <h1>MedConnect</h1>
            </div>
            <div class="panel-content">
                <h2>Join Our Mission to Reduce Medical Waste</h2>
                <p>MedConnect bridges the gap between unused medicines and those in need. By joining our community, you're contributing to a sustainable healthcare ecosystem.</p>
                
                <div class="features">
                    <div class="feature">
                        <i class="fas fa-check-circle"></i>
                        <span>Donate unused medicines to help others</span>
                    </div>
                    <div class="feature">
                        <i class="fas fa-check-circle"></i>
                        <span>Request essential medicines when in need</span>
                    </div>
                    <div class="feature">
                        <i class="fas fa-check-circle"></i>
                        <span>Track your donations and requests</span>
                    </div>
                    <div class="feature">
                        <i class="fas fa-check-circle"></i>
                        <span>Be part of a socially responsible community</span>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="right-panel">
            <div class="form-header">
                <h2>Create Your Account</h2>
                <p>Join thousands of users making healthcare accessible to all</p>
            </div>
            
            <div class="form-container">
                <% if (success) { %><div class="flash success"><%= success %></div><% } %>
                <% if (error) { %><div class="flash error"><%= error %></div><% } %>
                <form id="registrationForm" action="/auth/register" method="POST">
                    <div class="form-row">
                        <div class="input-group">
                            <label for="firstName">First Name</label>
                            <i class="fas fa-user input-icon"></i>
                            <input type="text" id="firstName" name="firstName" placeholder="Enter your first name" required>
                        </div>
                        
                        <div class="input-group">
                            <label for="lastName">Last Name</label>
                            <i class="fas fa-user input-icon"></i>
                            <input type="text" id="lastName" name="lastName" placeholder="Enter your last name" required>
                        </div>
                    </div>
                    
                    <div class="input-group">
                        <label for="email">Email Address</label>
                        <i class="fas fa-envelope input-icon"></i>
                        <input type="email" id="email" name="email" placeholder="Enter your email" required>
                    </div>
                    
                    <div class="input-group">
                        <label for="phone">Phone Number</label>
                        <i class="fas fa-phone input-icon"></i>
                        <input type="tel" id="phone" name="phone" placeholder="Enter your phone number" required>
                    </div>
                    
                    <div class="input-group">
                        <label for="password">Password</label>
                        <i class="fas fa-lock input-icon" style="z-index: 100;"></i>
                        <div class="password-container">
                            <input type="password" id="password" name="password" placeholder="Create a password" required>
                            <i class="fas fa-eye toggle-password" id="togglePassword"></i>
                        </div>
                        
                        <!-- Password Strength Checker -->
                        <div class="password-strength-container" id="passwordStrengthContainer" style="display: none;">
                            <div class="strength-meter">
                                <div class="strength-fill" id="strengthFill"></div>
                            </div>
                            <div class="strength-text" id="strengthText"></div>
                            <div class="strength-requirements">
                                <div class="requirement" id="reqLength">
                                    <i class="fas fa-circle"></i>
                                    <span>At least 8 characters</span>
                                </div>
                                <div class="requirement" id="reqUppercase">
                                    <i class="fas fa-circle"></i>
                                    <span>One uppercase letter</span>
                                </div>
                                <div class="requirement" id="reqLowercase">
                                    <i class="fas fa-circle"></i>
                                    <span>One lowercase letter</span>
                                </div>
                                <div class="requirement" id="reqNumber">
                                    <i class="fas fa-circle"></i>
                                    <span>One number</span>
                                </div>
                                <div class="requirement" id="reqSpecial">
                                    <i class="fas fa-circle"></i>
                                    <span>One special character</span>
                                </div>
                                <div class="requirement" id="reqNoCommon">
                                    <i class="fas fa-circle"></i>
                                    <span>Not a common password</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                                         <div class="input-group">
                         <label for="confirmPassword">Confirm Password</label>
                         <i class="fas fa-lock input-icon"></i>
                         <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm your password" required>
                     </div>
                     
                     <div class="password-validation" id="passwordValidation" style="display: none;">
                         <span id="validationMessage"></span>
                     </div>
                     
                                          <div class="input-group">
                         <button type="button" class="btn btn-primary" id="sendOTP">Send OTP to Email</button>
                     </div>
                     
                     <div class="success-message" id="successMessage">
                         <i class="fas fa-check-circle"></i>
                         <span>OTP sent successfully! Check your email.</span>
                     </div>
                     
                     <div class="otp-section" id="otpSection" style="display:none;">
                        <h3>OTP Verification</h3>
                        <p>We've sent a 6-digit code to your email address</p>
                        
                        <div class="otp-inputs">
                            <input type="text" maxlength="1" class="otp-digit">
                            <input type="text" maxlength="1" class="otp-digit">
                            <input type="text" maxlength="1" class="otp-digit">
                            <input type="text" maxlength="1" class="otp-digit">
                            <input type="text" maxlength="1" class="otp-digit">
                            <input type="text" maxlength="1" class="otp-digit">
                        </div>
                        <input type="hidden" name="otp" id="otpValue">
                        <div class="timer">
                            <span id="countdown">02:00</span>
                        </div>
                        
                        <div class="resend-otp">
                            <a href="#" id="resendOTP">Resend OTP</a>
                        </div>
                        
                    </div>
                    
                    <button type="submit" class="btn btn-secondary" id="submitBtn" disabled>Complete Registration</button>
                </form>
                
                <div class="terms">
                    <p>By registering, you agree to our <a href="#">Terms of Service</a> and <a href="#">Privacy Policy</a></p>
                </div>
                
                <div class="login-link">
                    <p>Already have an account? <a href="/auth/login">Log in</a></p>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Password visibility toggle
            const togglePassword = document.getElementById('togglePassword');
            const password = document.getElementById('password');
            
            togglePassword.addEventListener('click', function() {
                const type = password.getAttribute('type') === 'password' ? 'text' : 'password';
                password.setAttribute('type', type);
                this.classList.toggle('fa-eye');
                this.classList.toggle('fa-eye-slash');
            });
            
                         // OTP functionality
             const sendOTP = document.getElementById('sendOTP');
             const otpSection = document.getElementById('otpSection');
             const resendOTP = document.getElementById('resendOTP');
             const countdown = document.getElementById('countdown');
             const otpInputs = document.querySelectorAll('.otp-digit');
             const submitBtn = document.getElementById('submitBtn');
             const otpValue = document.getElementById('otpValue');
             const successMessage = document.getElementById('successMessage');
            
            // Focus management for OTP inputs
            otpInputs.forEach((input, index) => {
                input.addEventListener('input', function() {
                    if (this.value.length === 1) {
                        if (index < otpInputs.length - 1) {
                            otpInputs[index + 1].focus();
                        }
                    }
                    // Set hidden OTP value
                    otpValue.value = Array.from(otpInputs).map(i => i.value).join('');
                });
                
                input.addEventListener('keydown', function(e) {
                    if (e.key === 'Backspace' && this.value === '') {
                        if (index > 0) {
                            otpInputs[index - 1].focus();
                        }
                    }
                });
            });
            
            let timer;
            let timeLeft = 120; // 2 minutes
            
            function startTimer() {
                clearInterval(timer);
                timeLeft = 120;
                updateTimer();
                
                timer = setInterval(function() {
                    timeLeft--;
                    updateTimer();
                    
                    if (timeLeft <= 0) {
                        clearInterval(timer);
                    }
                }, 1000);
            }
            
            function updateTimer() {
                const minutes = Math.floor(timeLeft / 60);
                const seconds = timeLeft % 60;
                countdown.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }
            
                         // Password strength checker and validation function
             function checkPasswordStrength(password) {
                 const strengthContainer = document.getElementById('passwordStrengthContainer');
                 const strengthFill = document.getElementById('strengthFill');
                 const strengthText = document.getElementById('strengthText');
                 
                 // Common passwords to check against
                 const commonPasswords = [
                     'password', '123456', '123456789', 'qwerty', 'abc123', 
                     'password123', 'admin', 'letmein', 'welcome', 'monkey',
                     '12345678', '1234567', '1234567890', 'qwerty123', 'password1'
                 ];
                 
                 // Requirements
                 const requirements = {
                     length: password.length >= 8,
                     uppercase: /[A-Z]/.test(password),
                     lowercase: /[a-z]/.test(password),
                     number: /\d/.test(password),
                     special: /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password),
                     noCommon: !commonPasswords.includes(password.toLowerCase())
                 };
                 
                 // Update requirement indicators
                 document.getElementById('reqLength').className = `requirement ${requirements.length ? 'met' : 'not-met'}`;
                 document.getElementById('reqUppercase').className = `requirement ${requirements.uppercase ? 'met' : 'not-met'}`;
                 document.getElementById('reqLowercase').className = `requirement ${requirements.lowercase ? 'met' : 'not-met'}`;
                 document.getElementById('reqNumber').className = `requirement ${requirements.number ? 'met' : 'not-met'}`;
                 document.getElementById('reqSpecial').className = `requirement ${requirements.special ? 'met' : 'not-met'}`;
                 document.getElementById('reqNoCommon').className = `requirement ${requirements.noCommon ? 'met' : 'not-met'}`;
                 
                 // Update requirement icons
                 document.querySelectorAll('.requirement i').forEach((icon, index) => {
                     const reqKeys = Object.keys(requirements);
                     const isMet = requirements[reqKeys[index]];
                     icon.className = isMet ? 'fas fa-check' : 'fas fa-times';
                 });
                 
                 // Calculate strength score
                 const metRequirements = Object.values(requirements).filter(Boolean).length;
                 let strength = 'very-weak';
                 let strengthLabel = 'Very Weak';
                 
                 if (metRequirements >= 5 && password.length >= 8) {
                     strength = 'strong';
                     strengthLabel = 'Strong';
                 } else if (metRequirements >= 4 && password.length >= 8) {
                     strength = 'good';
                     strengthLabel = 'Good';
                 } else if (metRequirements >= 3) {
                     strength = 'fair';
                     strengthLabel = 'Fair';
                 } else if (metRequirements >= 2) {
                     strength = 'weak';
                     strengthLabel = 'Weak';
                 }
                 
                 // Update strength meter and text
                 strengthFill.className = `strength-fill ${strength}`;
                 strengthText.className = `strength-text ${strength}`;
                 strengthText.textContent = strengthLabel;
                 
                 return { strength, requirements, metRequirements };
             }
             
             function validatePassword() {
                 const password = document.getElementById('password').value;
                 const confirmPassword = document.getElementById('confirmPassword').value;
                 const validationDiv = document.getElementById('passwordValidation');
                 const validationMessage = document.getElementById('validationMessage');
                 const strengthContainer = document.getElementById('passwordStrengthContainer');
                 
                 // Remove existing classes
                 validationDiv.classList.remove('success', 'error', 'warning');
                 
                 // Show/hide strength checker based on password input
                 if (password) {
                     strengthContainer.style.display = 'block';
                     checkPasswordStrength(password);
                 } else {
                     strengthContainer.style.display = 'none';
                 }
                 
                 // Check if both fields are empty
                 if (!password && !confirmPassword) {
                     validationDiv.style.display = 'none';
                     return false;
                 }
                 
                 // Check if password is empty
                 if (!password) {
                     validationDiv.style.display = 'block';
                     validationDiv.classList.add('error');
                     validationMessage.textContent = 'Please enter your password.';
                     return false;
                 }
                 
                 // Check if confirm password is empty
                 if (!confirmPassword) {
                     validationDiv.style.display = 'block';
                     validationDiv.classList.add('error');
                     validationMessage.textContent = 'Please confirm your password.';
                     return false;
                 }
                 
                 // Check password strength requirements
                 const strengthResult = checkPasswordStrength(password);
                 const minRequirements = 4; // At least 4 requirements must be met
                 
                 if (strengthResult.metRequirements < minRequirements || password.length < 8) {
                     validationDiv.style.display = 'block';
                     validationDiv.classList.add('warning');
                     validationMessage.textContent = 'Password does not meet minimum security requirements.';
                     return false;
                 }
                 
                 // Check if passwords match
                 if (password !== confirmPassword) {
                     validationDiv.style.display = 'block';
                     validationDiv.classList.add('error');
                     validationMessage.textContent = 'Passwords do not match.';
                     return false;
                 }
                 
                 // Passwords match and meet requirements
                 validationDiv.style.display = 'block';
                 validationDiv.classList.add('success');
                 validationMessage.textContent = 'Passwords match and meet security requirements! ✓';
                 return true;
             }
             
             // Add event listeners for password validation
             document.getElementById('password').addEventListener('input', function() {
                 const password = this.value;
                 const strengthContainer = document.getElementById('passwordStrengthContainer');
                 
                 if (password) {
                     strengthContainer.style.display = 'block';
                     checkPasswordStrength(password);
                 } else {
                     strengthContainer.style.display = 'none';
                 }
                 
                 validatePassword();
             });
             
             document.getElementById('confirmPassword').addEventListener('input', validatePassword);
             
                           sendOTP.addEventListener('click', function() {
                  const email = document.getElementById('email').value;
                  const phone = document.getElementById('phone').value;
                  const password = document.getElementById('password').value;
                  const confirmPassword = document.getElementById('confirmPassword').value;
                  
                  // Check if email is filled
                  if (!email) {
                      alert('Please enter your email first.');
                      return;
                  }
                  
                  // Check if phone is filled
                  if (!phone) {
                      alert('Please enter your phone number first.');
                      return;
                  }
                  
                  // Validate password
                  if (!validatePassword()) {
                      return;
                  }
                  
                  // Add loading state
                  sendOTP.classList.add('loading');
                  sendOTP.disabled = true;
                  
                  fetch('/auth/send-otp', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({ email, phone })
                  })
                 .then(res => res.json())
                 .then(data => {
                     // Remove loading state
                     sendOTP.classList.remove('loading');
                     
                                           if (data.success) {
                          // Show success message
                          successMessage.style.display = 'block';
                          
                          // Don't auto-hide success message - let it stay visible
                          
                          otpSection.style.display = 'block';
                          startTimer();
                          submitBtn.disabled = false;
                      } else {
                          // Show error message in the same style as success message
                          successMessage.innerHTML = '<i class="fas fa-exclamation-circle"></i><span>' + (data.error || 'Failed to send OTP.') + '</span>';
                          successMessage.style.display = 'block';
                          successMessage.style.backgroundColor = 'rgba(220, 53, 69, 0.1)';
                          successMessage.style.color = '#dc3545';
                          successMessage.style.borderColor = 'rgba(220, 53, 69, 0.3)';
                          
                          // Don't auto-hide error message - let it stay visible
                          
                          sendOTP.disabled = false;
                      }
                 })
                                   .catch(() => {
                      // Remove loading state
                      sendOTP.classList.remove('loading');
                      
                      // Show error message in the same style as success message
                      successMessage.innerHTML = '<i class="fas fa-exclamation-circle"></i><span>Failed to send OTP. Please try again.</span>';
                      successMessage.style.display = 'block';
                      successMessage.style.backgroundColor = 'rgba(220, 53, 69, 0.1)';
                      successMessage.style.color = '#dc3545';
                      successMessage.style.borderColor = 'rgba(220, 53, 69, 0.3)';
                      
                      // Don't auto-hide error message - let it stay visible
                      
                      sendOTP.disabled = false;
                  });
             });
            
            resendOTP.addEventListener('click', function(e) {
                e.preventDefault();
                if (timeLeft > 0) {
                    alert('Please wait until the timer expires to resend OTP');
                    return;
                }
                sendOTP.click();
            });
            
            // Enable submit only if OTP is 6 digits
            otpInputs.forEach(input => {
                input.addEventListener('input', function() {
                    otpValue.value = Array.from(otpInputs).map(i => i.value).join('');
                    submitBtn.disabled = otpValue.value.length !== 6;
                });
            });
            
            // Form submission validation
            document.querySelector('form').addEventListener('submit', function(e) {
                const password = document.getElementById('password').value;
                const confirmPassword = document.getElementById('confirmPassword').value;
                
                // Check if passwords match before form submission
                if (password !== confirmPassword) {
                    e.preventDefault();
                    alert('Password and Confirm Password do not match.');
                    return false;
                }
                
                // Check password strength
                if (password.length < 6) {
                    e.preventDefault();
                    alert('Password must be at least 6 characters long.');
                    return false;
                }
            });
        });
    </script>
</body>
</html>